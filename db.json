{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/my-second-post.md","hash":"46e2e9dd2ed46612f6dd5e8d308e93757d29e4ad","modified":1713170174030},{"_id":"source/_posts/hellovvf.md","hash":"80e077540076d2d8d6c335a3b7953b8d3579b983","modified":1713171952526},{"_id":"source/archives/index.md","hash":"ec9f6953eb180d2951644ac05399e0020476378b","modified":1713170174030},{"_id":"source/timeline/index.md","hash":"5eaf374c6a778ec1f475042cebfc6979745d16e8","modified":1713170174030},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1713170174034},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1713170174034},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1713170174034},{"_id":"themes/next/.stylelintrc","hash":"c6b473cc7337d35b278cd9d85855c60ee2fead3e","modified":1713170174034},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1713170174034},{"_id":"themes/next/_vendors.yml","hash":"9f0128c829bff4e9935d5993cd3bde96cc7bef0e","modified":1713170174048},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1713170174048},{"_id":"themes/next/package.json","hash":"848d840614069063b40698b88a0ce1e711187e8a","modified":1713170174137},{"_id":"themes/next/_config.yml","hash":"e911cf113e3c1072a91bc333f490880a0a27e6ed","modified":1713714678967},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1713170174034},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1713170174137},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1713170174052},{"_id":"themes/next/README.md","hash":"fe1761cb3eab07a1742296c5976c30f2346073b7","modified":1713170174048},{"_id":"themes/next/languages/ar.yml","hash":"a18fecc404177bd8f76bab82826f5931ec557069","modified":1713170174073},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1713170174069},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1713170174075},{"_id":"themes/next/languages/bn.yml","hash":"785c43cf417879240515435da64b98660f3deaaf","modified":1713170174073},{"_id":"themes/next/languages/de.yml","hash":"0607d8973e74824321564714f92c8a6afcbbc6d5","modified":1713170174073},{"_id":"themes/next/languages/fa.yml","hash":"9e7b49b9017a3ffa62949f31c7ea3eecb8e547f5","modified":1713170174075},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1713170174061},{"_id":"themes/next/languages/es.yml","hash":"c52a4747f2d112f217a2d2cc9217d62aa62ff24f","modified":1713170174075},{"_id":"themes/next/languages/id.yml","hash":"5da84365f133d8afda5288554aa82c8d8ea1a9fd","modified":1713170174075},{"_id":"themes/next/languages/en.yml","hash":"03041988456463c08aae64415d4b3b7ec32c92d1","modified":1713170174075},{"_id":"themes/next/languages/it.yml","hash":"56d4fe22fd7a30954e62b003ff95d5949765fbfb","modified":1713170174075},{"_id":"themes/next/languages/fr.yml","hash":"66443aef072a9e20cb053c8fee339377827c96f9","modified":1713170174075},{"_id":"themes/next/languages/nl.yml","hash":"a27feeb08d8e6dc1439dd258b2ef6e65cfe4ca17","modified":1713170174079},{"_id":"themes/next/languages/si.yml","hash":"c608d89d85061a488eca222b99e5062f2fc6b681","modified":1713170174079},{"_id":"themes/next/languages/ko.yml","hash":"05a78a32e4e7dd5903153231ba0d10dd73823ab9","modified":1713170174079},{"_id":"themes/next/languages/ja.yml","hash":"4944ad1e226f2a4f965fe409989b7506f9264e76","modified":1713170174075},{"_id":"themes/next/languages/pt-BR.yml","hash":"6ff0fac38e3cfb2d79f64645d90a7e7f2f2764d3","modified":1713170174079},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1713170174052},{"_id":"themes/next/languages/ru.yml","hash":"ee381a6c2c8bd85580b03ab52cf5cb95dca4899b","modified":1713170174079},{"_id":"themes/next/languages/th.yml","hash":"14845e9fbd235c0ff70522992e6be97f0ef1a523","modified":1713170174079},{"_id":"themes/next/languages/pt.yml","hash":"46b82ce46d3a09391a068dfa519b7a6baf04a775","modified":1713170174079},{"_id":"themes/next/languages/tk.yml","hash":"567e1bf608d94e212c7fff2eda1d1dbe6f5d5a58","modified":1713170174079},{"_id":"themes/next/languages/tr.yml","hash":"7625b7948a6bfc3ff8ae8d4d0470cdbae5e347be","modified":1713170174079},{"_id":"themes/next/languages/zh-CN.yml","hash":"b80d8b3de5b6d459ba607cb7133a62b4eca6382d","modified":1713170174083},{"_id":"themes/next/languages/uk.yml","hash":"a3d58cf753057963e08a355528dd7ce68b57c9b5","modified":1713170174083},{"_id":"themes/next/languages/vi.yml","hash":"73f7e23b1869b3a00da106635711679e6743f1ec","modified":1713170174083},{"_id":"themes/next/languages/zh-HK.yml","hash":"ff7fe965128f01d2c00bf68aef7a9fcfbf3a1174","modified":1713170174083},{"_id":"themes/next/languages/zh-TW.yml","hash":"4945d947d007987b6462fdb7b1a7fa996a58491d","modified":1713170174083},{"_id":"themes/next/layout/_layout.njk","hash":"0f2760cd7550ca30ffcc28e2dbd7f031a237b5a7","modified":1713170174083},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1713170174137},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1713170174137},{"_id":"themes/next/layout/post.njk","hash":"6767de9702a07a2a4e16a8a6bc9c5919536c1e3f","modified":1713170174137},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1713170174137},{"_id":"themes/next/layout/page.njk","hash":"6d2f7e7cd9fe868e96765b82d17df49081379e27","modified":1713170174137},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1713170174584},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1713170174061},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1713170174133},{"_id":"themes/next/docs/ru/README.md","hash":"caf25da442d08b3d0a4e4503c6f4d6b68b1ac2f2","modified":1713170174061},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1713170174069},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1713170174083},{"_id":"themes/next/layout/_macro/post.njk","hash":"fefa9d5f56607dbcbfd9b8d57b3f32c07167d847","modified":1713170174087},{"_id":"themes/next/docs/zh-CN/README.md","hash":"5500b0c6db58bf2e93e8ace98ae8da65de7e8318","modified":1713170174069},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"b9fc0a6b02f0380de939d1ea2a7c7d2e6be9f462","modified":1713170174087},{"_id":"themes/next/layout/_partials/comments.njk","hash":"60f4620dd479da6d86d1d493440e9e2a28b6e132","modified":1713170174087},{"_id":"themes/next/layout/_partials/footer.njk","hash":"3c99c51cc6cfc74f1bdef8c953aa81d8a9ab48ac","modified":1713170174087},{"_id":"themes/next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1713170174117},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1713170174129},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"c55167bc0dbe7e104d4f4d782e98fcabc7e07a35","modified":1713170174109},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1713170174117},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1713170174129},{"_id":"themes/next/layout/_third-party/index.njk","hash":"489d0cd36c75555fafa9551cf58ff35cb75a91f4","modified":1713170174129},{"_id":"themes/next/scripts/events/index.js","hash":"8ae618d4436dab49928c2bebc0837e5310dbe7de","modified":1713170174137},{"_id":"themes/next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1713170174149},{"_id":"themes/next/scripts/filters/post.js","hash":"e6cf4c94fc2291215a3345134ddbbc74d5091b00","modified":1713170174153},{"_id":"themes/next/scripts/filters/minify.js","hash":"997fc7153a7055bdf278e93d16a17c2d0bd62b8f","modified":1713170174149},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1713170174149},{"_id":"themes/next/scripts/helpers/engine.js","hash":"43568a872a93259fc1c497724a53914474ef83ae","modified":1713170174153},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1713170174153},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1713170174153},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"ad764d48715c5da87d33f048ad5f1ae8b4e2eb52","modified":1713170174153},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"2e8dcc12a52517bb4e00ea611720bcd298624112","modified":1713170174153},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"483d75522e76c7e67c7e0dfd5cac8ab04784a04c","modified":1713170174153},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1713170174153},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1713170174157},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1713170174157},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1713170174157},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1713170174157},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1713170174157},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1713170174157},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1713170174157},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1713170174157},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1713170174157},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1713170174161},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1713170174161},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1713170174161},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1713170174129},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"9471c4f3aeee101b9b9a8c2aae7d21ec7277574e","modified":1713170174117},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1713170174105},{"_id":"themes/next/source/css/_mixins.styl","hash":"eacfdd1795ccc0138e194fbf9381d3a64b5ba130","modified":1713170174213},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1713170174163},{"_id":"themes/next/source/css/noscript.styl","hash":"64b378a4d2f0b36bf666fba13b57c59da3a8ac83","modified":1713170174226},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1713170174226},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1713170174226},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1713170174226},{"_id":"themes/next/source/css/main.styl","hash":"c326550ce8b4deaa9b647bcfe3cdc04c100644e6","modified":1713170174226},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1713170174247},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1713170174247},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1713170174247},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1713170174247},{"_id":"themes/next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1713170174247},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1713170174264},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1713170174264},{"_id":"themes/next/source/js/motion.js","hash":"d4c01d5317d45444e91a52236b751c9e9ab1bc16","modified":1713170174264},{"_id":"themes/next/source/js/next-boot.js","hash":"da11083557070d947da48d29d2d60988c8d628e9","modified":1713170174264},{"_id":"themes/next/source/js/pjax.js","hash":"c999bfc7cad747e3da0fe3d75c31dd933bf63016","modified":1713170174264},{"_id":"themes/next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1713170174264},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1713170174579},{"_id":"themes/next/test/helpers/next-url.js","hash":"08e84781f1cd54e5634b86877ad9cefae4a78e95","modified":1713170174579},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1713170174579},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1713170174588},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1713170174584},{"_id":"themes/next/source/js/utils.js","hash":"6b8152558a7c3b1ab6649cf3dfa897c7ada97138","modified":1713170174579},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1713170174588},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1713170174588},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1713170174588},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1713170174588},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1713170174588},{"_id":"themes/next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1713170174588},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1713170174592},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1713170174588},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1713170174592},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1713170174592},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1713170174592},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1713170174087},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1713170174105},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1713170174105},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1713170174105},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1713170174105},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"7bf2b6ab499775355bbf8f3ae597ff7bc00e89e4","modified":1713170174101},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"e016c3f80db433f17781caf26e44f2089a71550a","modified":1713170174101},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1713170174109},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1713170174109},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1713170174109},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1713170174109},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1713170174109},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1713170174109},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"9a7eda45ad0753d5f624c51a56e00277ba97c93d","modified":1713170174113},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebe45ab38ace03ea74eed3f676ec1cb5805a3c8a","modified":1713170174109},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"fd6fde597ea2fb7b80cffd0a3553c8e73acb8ab2","modified":1713170174113},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"d251532b76d4b44e84732f78e774b18e2415d7d9","modified":1713170174113},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1713170174113},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1713170174113},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1713170174113},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1713170174113},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1713170174121},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1713170174117},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1713170174117},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1713170174121},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"43238bc1bc2e88d707f8097814ef3ff830cbe641","modified":1713170174121},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"81abcf790cf97395cde9e3cd6d5d1aa5656bd134","modified":1713170174121},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"724a58f5296ab4a12910c81f2e619e607b2b21a6","modified":1713170174121},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"64ed6fecae79f9f9c61e956d2bd077792473e069","modified":1713170174121},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1713170174121},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"3de5c9676aaf6a2f7d837db275c56d15f9b74fb8","modified":1713170174113},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1713170174121},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"375a86f0b19e130cfa7707007e3a53d9ae7c9b64","modified":1713170174125},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1713170174125},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1713170174125},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1713170174125},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1713170174125},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1713170174125},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1713170174125},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1713170174125},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1713170174125},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1713170174129},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1df65b1390add93b86ae3f9423d96a130b0ece04","modified":1713170174129},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1713170174129},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1713170174133},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1713170174129},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1713170174133},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1713170174133},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1713170174133},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1713170174141},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1713170174141},{"_id":"themes/next/scripts/events/lib/config.js","hash":"7c29184a37222d6499c5220264fda6942afc03a9","modified":1713170174141},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1713170174141},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"a96050b0a9bcb49f1f6897660efc77991024790a","modified":1713170174145},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"65825c37e473c942095df05183424003d7263df5","modified":1713170174141},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"761760031e49edb77277bd4a8582774959240d6b","modified":1713170174145},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1713170174145},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1713170174145},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1713170174145},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"4dbe9652ae53a181c86eb7e9005a5255f0540055","modified":1713170174145},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1713170174149},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1713170174149},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1713170174149},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1713170174149},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1713170174133},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1713170174133},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1713170174133},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5092cacdfbc482996d0bee9fdf2c37d8d3ae863c","modified":1713170174222},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1713170174222},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"77d9c468897283223cdc922eb7e146ca7a83420c","modified":1713170174222},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1713170174222},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c8b101c76b179877a22256922a56d30d0926bc51","modified":1713170174222},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1713170174575},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"49c3063b46d65796003a822deed971abee41675e","modified":1713170174163},{"_id":"themes/next/source/js/schemes/muse.js","hash":"aa84bdd853a9b0646ad9157e26df949ba0ec57c3","modified":1713170174268},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1713170174575},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1713170174193},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"969c3797d4315a2873aa143d0674d251fa0c5703","modified":1713170174163},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1713170174185},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"8a847a7bbdbc0086dd1de12b82107a854b43f5e5","modified":1713170174571},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1713170174201},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"2db4462e9cb87b8aef3f50f850fed407de16da3e","modified":1713170174193},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1713170174201},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1713170174205},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1713170174201},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"fd4a2d2303f107a021837aa6e3d977c2f9d14c42","modified":1713170174205},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"aa34abe71ad476922a0371bcac82cd8e5b45d383","modified":1713170174209},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1713170174205},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1713170174205},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"2db5ada757f7ffb9a36b06400cf30d80ec039b6e","modified":1713170174213},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"a28f0858a0f4c3aac5496c693893696d5ac12372","modified":1713170174213},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e728caca94567b4d4215402d01e449e23969e7e1","modified":1713170174213},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"82311a531e26ca5a6ad17cf14959da75d4ac6106","modified":1713170174213},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8edf8fc4bc4a3913822fa4f8cf5abf3bcf011f56","modified":1713170174217},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1713170174217},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"68f8d30071516913a7a958e01d010e8a93f7aa24","modified":1713170174213},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"ec5d4e8ffe74722a092a69ace2f8dec7776466a8","modified":1713170174217},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"8ece7c8d3f95b7db3588465faff66adeff4d406e","modified":1713170174217},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1713170174217},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1713170174217},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"06835446a1c7353f434a9527889a53d6be69766c","modified":1713170174217},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1713170174221},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e06e0fd44e39838ce22ac7829a2421f8c9e1b12d","modified":1713170174222},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"6630a642ad2311ec09466c962963c006c4df4c38","modified":1713170174221},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1713170174222},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"507179f9d5648089e3b4da0e17cca74acc20e38a","modified":1713170174221},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1713170174222},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1713170174268},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1713170174268},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1713170174268},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"14b024c920a8b359777d79dd8e1a849387f8f3ad","modified":1713170174555},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"5673d28509a8e837a512da490a88b7bf5162fc49","modified":1713170174555},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1713170174555},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"f24604710002234f18a7b5cfe9ccdf3ed6e725a8","modified":1713170174268},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1713170174555},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1713170174555},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"07e0038b221b9a4fd8ccac75093de3dee1f8315e","modified":1713170174555},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1713170174571},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1713170174571},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1713170174571},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1713170174575},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"e927000b375e79e2d173bdc6b8b45e67364fad4a","modified":1713170174575},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1713170174575},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"ce12b5007c9aa997738641c06a1c081c357e27bd","modified":1713170174575},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"e6361ed3d5fa959e11e90f7dab8fdaff398b4425","modified":1713170174575},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1713170174571},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1713170174579},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"7db3233f0b33870943ce1547326a67f9e628b411","modified":1713170174579},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1713170174163},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"e9fffe2a14751e86aed5e84a5e96514413eac2dc","modified":1713170174579},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1713170174163},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1713170174163},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1713170174163},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1713170174167},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"aa04527f76de7646573ea327d4f6145200d6070d","modified":1713170174181},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"268e0a4cf638b9ce4db07268031ab34c5f31ac65","modified":1713170174181},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"7245d8364092c2d184e658e801ba94815a2a1f81","modified":1713170174181},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1713170174181},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1713170174181},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1713170174181},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"4790d37a40b80f7278ec55274f017dad21791038","modified":1713170174181},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4d29b6ae7ed3dc44b10df851a4128b6441efa8be","modified":1713170174181},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"406c03be3cf8a8411227bc1fecf942ca368f7e2a","modified":1713170174185},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"a2ffaa06c963514a79fda52665e707af6e8e2f5e","modified":1713170174185},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"7b36f776c41fbb744572c5de2c8d49b35656ec21","modified":1713170174185},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1713170174189},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"777efaacbabb623f1d77fac5dd784401f8dea4cd","modified":1713170174185},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"65dde3ba925ac19b0bfcb7fa70cf4157bec02576","modified":1713170174185},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"08d609b0534b9a5151cab7e6d54c0dec6a8dad8c","modified":1713170174185},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"038625515ba4760e4dda6792549bddc0db5a3d20","modified":1713170174189},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1713170174189},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1713170174189},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1713170174189},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1713170174189},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"bdfef8d2363bc199dfbcc23ee833edca27cc9fcf","modified":1713170174197},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"39066b4e2e914d85736c9c33fa51f21a3f86c0e4","modified":1713170174189},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1713170174193},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1713170174197},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"dce8ea62d7d7b08a0444fbb2f617be30bfcfc152","modified":1713170174193},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b3689beb90cda64cafecaf6b25981fe8a9525992","modified":1713170174197},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"06d551ef6e26d426bb3ffb4638714488c7cbce66","modified":1713170174193},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"f8a97aad14e0b16b555ee0048da5402f818f9693","modified":1713170174197},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1713170174197},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"63d8f5f169c2b1c969928fc79244c5fe89ee484e","modified":1713170174197},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"cbc6b0938a2e60f35a5df32210904fb16e4938da","modified":1713170174201},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"8f82d5141a18f6319e0609a3f6e4fcca6d442203","modified":1713170174197},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1713170174201},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"509bad7d1d6b5c6f24a3f205b2ed7b65a2326dd4","modified":1713170174201},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"047bf8176ea24e277b1a4f6e6ad599033f1d1a44","modified":1713170174201},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"a3ea8e3d2347f417ec163d191c9d7c1e9d606c1e","modified":1713170174201},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1713170174205},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"e22fde6f1657d311d46f64d868c4491d535c8caa","modified":1713170174209},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1713170174209},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1713170174209},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1713170174209},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1713170174205},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"3324e9d09faf3903bc9815358bda4000bbb691fa","modified":1713170174209},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f71b2022094c5bc8c74b4ed049639f7262e0b182","modified":1713170174209},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1713170174209},{"_id":"public/archives/index.html","hash":"605a65a2afa372f6ed604803fe3f41303c83c6ba","modified":1713172100350},{"_id":"public/timeline/index.html","hash":"c2e75853b2536cbb18c3a2366043eacdf3885669","modified":1713172100350},{"_id":"public/2024/04/15/hellovvf/index.html","hash":"acd1832f6ee09c4262e7ae76c7c6d76d0f9c6e0c","modified":1713172100350},{"_id":"public/archives/2023/index.html","hash":"4dd38ba2fc8a297311084284fa8ec569fb8125fb","modified":1713172100350},{"_id":"public/2023/03/14/my-second-post/index.html","hash":"771232f2dae98bc32996aaacc5c1c6362cf93934","modified":1713172100350},{"_id":"public/archives/2023/03/index.html","hash":"ff879e79b50a6ed5e53765c0f9f492c47baae15f","modified":1713172100350},{"_id":"public/archives/2024/index.html","hash":"7343e4394435e9ca7509e29b38704d26df9a2f59","modified":1713172100350},{"_id":"public/archives/2024/04/index.html","hash":"b590ad9cf892b1a57abd39a30be35e8eef3420c0","modified":1713172100350},{"_id":"public/index.html","hash":"2092506ee974615f3191867f4c6cadec68e345de","modified":1713172100350},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1713172100350},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1713172100350},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1713172100350},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1713172100350},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1713172100350},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1713172100350},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1713172100350},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1713172100350},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1713172100350},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1713172100350},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1713172100350},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1713172100350},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1713172100350},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1713172100350},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1713172100350},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1713172100350},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1713172100350},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1713172100350},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1713172100350},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1713172100350},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1713172100350},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1713172100350},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1713172100350},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1713172100350},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1713172100350},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1713172100350},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1713172100350},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1713172100350},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1713172100350},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1713172100350},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1713172100350},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1713172100350},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1713172100350},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1713172100350},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1713172100350},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1713172100350},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1713172100350},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1713172100350},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1713172100350},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1713172100350},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1713172100350},{"_id":"public/css/main.css","hash":"b2953da3b02bd6f8f506b154b0c5041327be5cb7","modified":1713172100350},{"_id":"public/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1713172100350},{"_id":"source/_posts/1.3递归.md","hash":"484b24bdbd2eb0e7d9f9741e0145922867dd2edd","modified":1713491438101},{"_id":"source/_posts/1.2运算符.md","hash":"133d89d5e61294bb7a5999b125a2d00d8131d1a0","modified":1713491634953},{"_id":"source/_posts/1.1数据类型.md","hash":"52b31b595b1eeca1ed1797e54dbd3d668c77b399","modified":1713495486131},{"_id":"source/_posts/12.png","hash":"5d89298af00ce6a4a3b93008daf5b4ca9bdb991b","modified":1713495480083},{"_id":"source/_posts/1.x字符串.md","hash":"bf76ac47c26947331a5372ff7095fbfe4ad33d3e","modified":1713494363832},{"_id":"source/_posts/字符串2.md","hash":"dd4969a28b8cb725c6c5c24cfc12be44abdae9ed","modified":1713495811145},{"_id":"source/_posts/字符串2/12.png","hash":"5d89298af00ce6a4a3b93008daf5b4ca9bdb991b","modified":1713495480083},{"_id":"source/_posts/1-2运算符.md","hash":"973838e5fcda8e54e47e8f4cabcc087891db3158","modified":1713712635473},{"_id":"source/_posts/1-3递归.md","hash":"484b24bdbd2eb0e7d9f9741e0145922867dd2edd","modified":1713491438101},{"_id":"source/_posts/1问题.md","hash":"5402a4f19f9ddeaf5e273d3f5a82bba29fc0e459","modified":1713581465742},{"_id":"source/_posts/1-1数据类型.md","hash":"f87ca9370b7a3d2d4195092aff4d7c73e2bb1d4e","modified":1713670368160},{"_id":"source/_posts/其他.md","hash":"50165281e5652c1df2bc9035c5b2c2910b9f4dcd","modified":1713707040760},{"_id":"source/_posts/UML.md","hash":"83274fa679dfc55860f2d0697204b070f1446c15","modified":1713836044179},{"_id":"source/_posts/1-1数据类型/112.png","hash":"5d89298af00ce6a4a3b93008daf5b4ca9bdb991b","modified":1713495480083},{"_id":"source/_posts/UML/UML符号.png","hash":"8320565d4626329427d6b44766fd57a70b95996c","modified":1713514851985},{"_id":"source/_posts/0-1学习路径.md","hash":"8ae5e63042f80014300cbaf3616689d65f352e74","modified":1713711170485},{"_id":"source/_posts/4-10类设计技巧.md","hash":"c759027a260127e2ab747ac6681358cdc45a63fd","modified":1713628524258},{"_id":"source/_posts.zip","hash":"89312e3f7d75c79c27bc9b17c3f7949a851cb8db","modified":1713710025948},{"_id":"source/_posts/JAVA/0-1学习路径.md","hash":"bd4c8624e4055a7d761fe925c246bc86b1c2d464","modified":1713712696224},{"_id":"source/_posts/tmp/0-1学习路径.md","hash":"98c8f75b985c18bd9a46d87864a1925b3769f42c","modified":1713711480679},{"_id":"source/_posts/设计模式/开篇词.md","hash":"2351b7ec6ec51521dd87adbb5ddc906e165c3fd8","modified":1713713775512},{"_id":"source/_posts/JAVA/1-1数据类型/112.png","hash":"5d89298af00ce6a4a3b93008daf5b4ca9bdb991b","modified":1713495480083},{"_id":"source/_posts/JAVA/基础/1-1数据类型/112.png","hash":"5d89298af00ce6a4a3b93008daf5b4ca9bdb991b","modified":1713495480083},{"_id":"source/1-1数据类型/112.png","hash":"5d89298af00ce6a4a3b93008daf5b4ca9bdb991b","modified":1713495480083},{"_id":"source/_posts/JAVA/基础/1-1数据类型.md","hash":"e64c2cb29a6a57d93a5c267f2d5a16608d1b2d9b","modified":1713836044447},{"_id":"source/_posts/JAVA/基础/1-2运算符.md","hash":"973838e5fcda8e54e47e8f4cabcc087891db3158","modified":1713712635473},{"_id":"source/_posts/JAVA/基础/1-3递归.md","hash":"484b24bdbd2eb0e7d9f9741e0145922867dd2edd","modified":1713491438101},{"_id":"source/_posts/JAVA/基础/4-10类设计技巧.md","hash":"c759027a260127e2ab747ac6681358cdc45a63fd","modified":1713628524258},{"_id":"source/_posts/JAVA/基础/其他.md","hash":"50165281e5652c1df2bc9035c5b2c2910b9f4dcd","modified":1713707040760},{"_id":"source/tags/index.md","hash":"7a661a9f2d400f871d44fe505cbdfe06bd9202a0","modified":1713714325015},{"_id":"source/_posts/JAVA/Tomcat/安装Tomcat.md","hash":"51c6e1968659f1530e10cacb4b2fd37ef80439ad","modified":1713836044084},{"_id":"source/_posts/JAVA/基础/反射.md","hash":"d693f6c76ecf5751996e883ab7b5f1820b10408b","modified":1713836044084},{"_id":"source/_posts/JAVA/基础/枚举.md","hash":"b4a7a52afb0605a881e2aa5623d18b8986b7dc99","modified":1713751637224},{"_id":"source/_posts/读书笔记/穷爸爸富爸爸.md","hash":"8d63670430962fae496df241bf7ca2c2dd73ee58","modified":1714054195087},{"_id":"source/_posts/JAVA/基础/6-3lambda表达式.md","hash":"097c1bdd907f315e2d8b38f0db1e744c2e45977b","modified":1714117590692},{"_id":"source/_posts/JAVA/基础/6-1接口.md","hash":"4c8490d09cb220d124ae7305c0e4b4df294dfb17","modified":1714094206325},{"_id":"source/_posts/JAVA/基础/6-5代理.md","hash":"eab087d004a1156ed10a25a97d0c53c796d2bf00","modified":1714147000688},{"_id":"source/_posts/JAVA/基础/6-4内部类.md","hash":"8c155d452718c42fe121cd31881a7cef6998b1d3","modified":1714140560788},{"_id":"source/_posts/JAVA/基础/6-3lambda表达式/6-3-2.png","hash":"35a1754434261c91d884d24a08dd7ba824ae291b","modified":1714099032391},{"_id":"source/_posts/JAVA/基础/6-3lambda表达式/6-3-1.png","hash":"ce5a323b262931480af809cb2e1843e8906e4fce","modified":1714098288399}],"Category":[],"Data":[],"Page":[{"title":"archives","date":"2023-03-14T13:04:49.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2023-03-14 21:04:49\n---\n","updated":"2024-04-15T08:36:14.030Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clv0qfpav0000mov0221f0jya","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"timeline","date":"2023-03-14T13:10:38.000Z","_content":"","source":"timeline/index.md","raw":"---\ntitle: timeline\ndate: 2023-03-14 21:10:38\n---\n","updated":"2024-04-15T08:36:14.030Z","path":"timeline/index.html","comments":1,"layout":"page","_id":"clv0qfpdk0002mov047u42to2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2024-04-21T15:42:24.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2024-04-21 23:42:24\ntype: tags\n---\n","updated":"2024-04-21T15:45:25.015Z","path":"tags/index.html","_id":"clv9p5klq0000hkv03r32hla4","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"UML","date":"2024-04-19T08:20:03.000Z","_content":"依赖 uses-a\n聚合 has-a\n继承 is-a\n\n\n\n","source":"_posts/UML.md","raw":"---\ntitle: UML\ndate: 2024-04-19 16:20:03\ntags:\n---\n依赖 uses-a\n聚合 has-a\n继承 is-a\n\n\n\n","slug":"UML","published":1,"updated":"2024-04-23T01:34:04.179Z","_id":"clv7i8ut50004lgv081d2gxez","comments":1,"layout":"post","photos":[],"link":"","content":"<p>依赖 uses-a<br>聚合 has-a<br>继承 is-a</p>\n","site":{"data":{}},"excerpt":"","more":"<p>依赖 uses-a<br>聚合 has-a<br>继承 is-a</p>\n"},{"title":"0-1学习路径","date":"2024-04-21T01:30:24.000Z","urlName":"learn","_content":"# JAVA\n### JAVA基础\n\n基础\nIO\n多线程\n并发\n网络\njvm\n\n### 框架\nSpring SpringMVC Springboot SpringCloud\nMybatis\nRedis Kafka  es Solr\n\n### 数据库\nMysql，调优\n\n### Linux\n\n### 服务器相关\nTomcat Nginx docker\n\n### 数据结构\n\n### 面向对象设计\n设计模式、面向对象分析设计\n\n对象的变量是多态的。多态动态绑定机制：编译时生成类方法表，运行时根据对象实例类型确定具体执行的方法\n### DevOps","source":"_posts/JAVA/0-1学习路径.md","raw":"---\ntitle: 0-1学习路径\ndate: 2024-04-21 09:30:24\ntags:\nurlName: learn\n---\n# JAVA\n### JAVA基础\n\n基础\nIO\n多线程\n并发\n网络\njvm\n\n### 框架\nSpring SpringMVC Springboot SpringCloud\nMybatis\nRedis Kafka  es Solr\n\n### 数据库\nMysql，调优\n\n### Linux\n\n### 服务器相关\nTomcat Nginx docker\n\n### 数据结构\n\n### 面向对象设计\n设计模式、面向对象分析设计\n\n对象的变量是多态的。多态动态绑定机制：编译时生成类方法表，运行时根据对象实例类型确定具体执行的方法\n### DevOps","slug":"JAVA/0-1学习路径","published":1,"updated":"2024-04-21T15:18:16.224Z","_id":"clv9n8o250000o0v0huic9ec8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h1><h3 id=\"JAVA基础\"><a href=\"#JAVA基础\" class=\"headerlink\" title=\"JAVA基础\"></a>JAVA基础</h3><p>基础<br>IO<br>多线程<br>并发<br>网络<br>jvm</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><p>Spring SpringMVC Springboot SpringCloud<br>Mybatis<br>Redis Kafka  es Solr</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>Mysql，调优</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><h3 id=\"服务器相关\"><a href=\"#服务器相关\" class=\"headerlink\" title=\"服务器相关\"></a>服务器相关</h3><p>Tomcat Nginx docker</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><h3 id=\"面向对象设计\"><a href=\"#面向对象设计\" class=\"headerlink\" title=\"面向对象设计\"></a>面向对象设计</h3><p>设计模式、面向对象分析设计</p>\n<p>对象的变量是多态的。多态动态绑定机制：编译时生成类方法表，运行时根据对象实例类型确定具体执行的方法</p>\n<h3 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h1><h3 id=\"JAVA基础\"><a href=\"#JAVA基础\" class=\"headerlink\" title=\"JAVA基础\"></a>JAVA基础</h3><p>基础<br>IO<br>多线程<br>并发<br>网络<br>jvm</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><p>Spring SpringMVC Springboot SpringCloud<br>Mybatis<br>Redis Kafka  es Solr</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>Mysql，调优</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><h3 id=\"服务器相关\"><a href=\"#服务器相关\" class=\"headerlink\" title=\"服务器相关\"></a>服务器相关</h3><p>Tomcat Nginx docker</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><h3 id=\"面向对象设计\"><a href=\"#面向对象设计\" class=\"headerlink\" title=\"面向对象设计\"></a>面向对象设计</h3><p>设计模式、面向对象分析设计</p>\n<p>对象的变量是多态的。多态动态绑定机制：编译时生成类方法表，运行时根据对象实例类型确定具体执行的方法</p>\n<h3 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h3>"},{"title":"开篇词","date":"2024-04-21T15:05:46.000Z","_content":"\n思考：\n1. 解决什么问题\n2. 应用场景\n3. 如何权衡，恰当应用于项目\n","source":"_posts/设计模式/开篇词.md","raw":"---\ntitle: 开篇词\ndate: 2024-04-21 23:05:46\ntags: 设计模式\n---\n\n思考：\n1. 解决什么问题\n2. 应用场景\n3. 如何权衡，恰当应用于项目\n","slug":"设计模式/开篇词","published":1,"updated":"2024-04-21T15:36:15.512Z","_id":"clv9nuxx200012sv0asage1r1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>思考：</p>\n<ol>\n<li>解决什么问题</li>\n<li>应用场景</li>\n<li>如何权衡，恰当应用于项目</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>思考：</p>\n<ol>\n<li>解决什么问题</li>\n<li>应用场景</li>\n<li>如何权衡，恰当应用于项目</li>\n</ol>\n"},{"title":"1.1数据类型","date":"2024-04-19T06:43:03.000Z","_content":"\n## 有8种基本类型\n- 4整形\n- 2浮点型\n- 字符类型char（表示Unicode编码的字符单元）\n- boolean类型\n\n###  整型\nint 4字节  默认类型\nshort 2 字节  \nlong 8字节  \nbyte 1字节  \n\n###  浮点型\nfloat 4字节  精度小数点后7位   大于7位会自动舍弃\ndouble 8字节  默认类型\n\n\nfloat和double只能用来做科学计算或者是工程计算，在商业计算中我们要用java.math.BigDecimal。使用BigDecimal并且一定要用String来够造\n\n浮点数值不适用于无法接受舍入误差的金融计算。 例如，命令 System.out.println( 2.0-1.1 ) 将打印出 0.8999999999999999, 而不是 0.9，原因是浮点数值采用二进制系统表示， 而在二进制系统中无法精确地表示分数 1/10。就好像十进制无法精确地表示分数 1/3—样。\n在数值计算中不允许有任何舍入误差，应使用 BigDecima丨类。\n\n###  char\n- 2字节  用来表示Unicode标码表中的字符  \n- 原本用于表示单个字符,如今，有些 Unicode字符可以用一个 char 值描述，另外一些 Unicode 字符则需要两个 char 值\n- Unicode 编码有65536个字符，ASCII码占用1个字节，可允许有128个字符，是Unicode的前128个字符\n- 可当做int来处理，因存储的是Unicode编码值  \n\n###  boolen\n- 1位\n- true或false\n\n## 引用类型\n- 类（枚举属于类）\n- 接口\n- 数组\n### 数组\n数组是一种数据结构， 用来存储同一类型值的集合\n- 存储相同数据类型\n- 连续存储空间（顺序存储）\n- 可通过下标直接访问\n\n\n### 类\n\n可见性\n- private 仅对本类可见\n- public 对所有类可见\n- protected 对本包和所有子类可见\n- 未指定 本包可见\n\n\n#### 抽象类\n- 抽象类中可以不定义抽象方法\n- 不可创建抽象类的对象，可创建变量指向其子类实例对象\n- 子类若是抽象类可不实现父类抽象方法\n\n\n\n### 接口\n\n\n\n\n## 常量和变量\n### 常量\nfinal修饰的变量，只能初始化依次，变成了常量\n","source":"_posts/JAVA/基础/1-1数据类型.md","raw":"---\ntitle: 1.1数据类型\ndate: 2024-04-19 14:43:03\ntags: JAVA\n---\n\n## 有8种基本类型\n- 4整形\n- 2浮点型\n- 字符类型char（表示Unicode编码的字符单元）\n- boolean类型\n\n###  整型\nint 4字节  默认类型\nshort 2 字节  \nlong 8字节  \nbyte 1字节  \n\n###  浮点型\nfloat 4字节  精度小数点后7位   大于7位会自动舍弃\ndouble 8字节  默认类型\n\n\nfloat和double只能用来做科学计算或者是工程计算，在商业计算中我们要用java.math.BigDecimal。使用BigDecimal并且一定要用String来够造\n\n浮点数值不适用于无法接受舍入误差的金融计算。 例如，命令 System.out.println( 2.0-1.1 ) 将打印出 0.8999999999999999, 而不是 0.9，原因是浮点数值采用二进制系统表示， 而在二进制系统中无法精确地表示分数 1/10。就好像十进制无法精确地表示分数 1/3—样。\n在数值计算中不允许有任何舍入误差，应使用 BigDecima丨类。\n\n###  char\n- 2字节  用来表示Unicode标码表中的字符  \n- 原本用于表示单个字符,如今，有些 Unicode字符可以用一个 char 值描述，另外一些 Unicode 字符则需要两个 char 值\n- Unicode 编码有65536个字符，ASCII码占用1个字节，可允许有128个字符，是Unicode的前128个字符\n- 可当做int来处理，因存储的是Unicode编码值  \n\n###  boolen\n- 1位\n- true或false\n\n## 引用类型\n- 类（枚举属于类）\n- 接口\n- 数组\n### 数组\n数组是一种数据结构， 用来存储同一类型值的集合\n- 存储相同数据类型\n- 连续存储空间（顺序存储）\n- 可通过下标直接访问\n\n\n### 类\n\n可见性\n- private 仅对本类可见\n- public 对所有类可见\n- protected 对本包和所有子类可见\n- 未指定 本包可见\n\n\n#### 抽象类\n- 抽象类中可以不定义抽象方法\n- 不可创建抽象类的对象，可创建变量指向其子类实例对象\n- 子类若是抽象类可不实现父类抽象方法\n\n\n\n### 接口\n\n\n\n\n## 常量和变量\n### 常量\nfinal修饰的变量，只能初始化依次，变成了常量\n","slug":"JAVA/基础/1-1数据类型","published":1,"updated":"2024-04-23T01:34:04.447Z","_id":"clv9oft8l00013cv0coxpai8b","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"有8种基本类型\"><a href=\"#有8种基本类型\" class=\"headerlink\" title=\"有8种基本类型\"></a>有8种基本类型</h2><ul>\n<li>4整形</li>\n<li>2浮点型</li>\n<li>字符类型char（表示Unicode编码的字符单元）</li>\n<li>boolean类型</li>\n</ul>\n<h3 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h3><p>int 4字节  默认类型<br>short 2 字节<br>long 8字节<br>byte 1字节  </p>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><p>float 4字节  精度小数点后7位   大于7位会自动舍弃<br>double 8字节  默认类型</p>\n<p>float和double只能用来做科学计算或者是工程计算，在商业计算中我们要用java.math.BigDecimal。使用BigDecimal并且一定要用String来够造</p>\n<p>浮点数值不适用于无法接受舍入误差的金融计算。 例如，命令 System.out.println( 2.0-1.1 ) 将打印出 0.8999999999999999, 而不是 0.9，原因是浮点数值采用二进制系统表示， 而在二进制系统中无法精确地表示分数 1&#x2F;10。就好像十进制无法精确地表示分数 1&#x2F;3—样。<br>在数值计算中不允许有任何舍入误差，应使用 BigDecima丨类。</p>\n<h3 id=\"char\"><a href=\"#char\" class=\"headerlink\" title=\"char\"></a>char</h3><ul>\n<li>2字节  用来表示Unicode标码表中的字符  </li>\n<li>原本用于表示单个字符,如今，有些 Unicode字符可以用一个 char 值描述，另外一些 Unicode 字符则需要两个 char 值</li>\n<li>Unicode 编码有65536个字符，ASCII码占用1个字节，可允许有128个字符，是Unicode的前128个字符</li>\n<li>可当做int来处理，因存储的是Unicode编码值</li>\n</ul>\n<h3 id=\"boolen\"><a href=\"#boolen\" class=\"headerlink\" title=\"boolen\"></a>boolen</h3><ul>\n<li>1位</li>\n<li>true或false</li>\n</ul>\n<h2 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h2><ul>\n<li>类（枚举属于类）</li>\n<li>接口</li>\n<li>数组</li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组是一种数据结构， 用来存储同一类型值的集合</p>\n<ul>\n<li>存储相同数据类型</li>\n<li>连续存储空间（顺序存储）</li>\n<li>可通过下标直接访问</li>\n</ul>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>可见性</p>\n<ul>\n<li>private 仅对本类可见</li>\n<li>public 对所有类可见</li>\n<li>protected 对本包和所有子类可见</li>\n<li>未指定 本包可见</li>\n</ul>\n<h4 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h4><ul>\n<li>抽象类中可以不定义抽象方法</li>\n<li>不可创建抽象类的对象，可创建变量指向其子类实例对象</li>\n<li>子类若是抽象类可不实现父类抽象方法</li>\n</ul>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><h2 id=\"常量和变量\"><a href=\"#常量和变量\" class=\"headerlink\" title=\"常量和变量\"></a>常量和变量</h2><h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>final修饰的变量，只能初始化依次，变成了常量</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"有8种基本类型\"><a href=\"#有8种基本类型\" class=\"headerlink\" title=\"有8种基本类型\"></a>有8种基本类型</h2><ul>\n<li>4整形</li>\n<li>2浮点型</li>\n<li>字符类型char（表示Unicode编码的字符单元）</li>\n<li>boolean类型</li>\n</ul>\n<h3 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h3><p>int 4字节  默认类型<br>short 2 字节<br>long 8字节<br>byte 1字节  </p>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><p>float 4字节  精度小数点后7位   大于7位会自动舍弃<br>double 8字节  默认类型</p>\n<p>float和double只能用来做科学计算或者是工程计算，在商业计算中我们要用java.math.BigDecimal。使用BigDecimal并且一定要用String来够造</p>\n<p>浮点数值不适用于无法接受舍入误差的金融计算。 例如，命令 System.out.println( 2.0-1.1 ) 将打印出 0.8999999999999999, 而不是 0.9，原因是浮点数值采用二进制系统表示， 而在二进制系统中无法精确地表示分数 1&#x2F;10。就好像十进制无法精确地表示分数 1&#x2F;3—样。<br>在数值计算中不允许有任何舍入误差，应使用 BigDecima丨类。</p>\n<h3 id=\"char\"><a href=\"#char\" class=\"headerlink\" title=\"char\"></a>char</h3><ul>\n<li>2字节  用来表示Unicode标码表中的字符  </li>\n<li>原本用于表示单个字符,如今，有些 Unicode字符可以用一个 char 值描述，另外一些 Unicode 字符则需要两个 char 值</li>\n<li>Unicode 编码有65536个字符，ASCII码占用1个字节，可允许有128个字符，是Unicode的前128个字符</li>\n<li>可当做int来处理，因存储的是Unicode编码值</li>\n</ul>\n<h3 id=\"boolen\"><a href=\"#boolen\" class=\"headerlink\" title=\"boolen\"></a>boolen</h3><ul>\n<li>1位</li>\n<li>true或false</li>\n</ul>\n<h2 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h2><ul>\n<li>类（枚举属于类）</li>\n<li>接口</li>\n<li>数组</li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组是一种数据结构， 用来存储同一类型值的集合</p>\n<ul>\n<li>存储相同数据类型</li>\n<li>连续存储空间（顺序存储）</li>\n<li>可通过下标直接访问</li>\n</ul>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>可见性</p>\n<ul>\n<li>private 仅对本类可见</li>\n<li>public 对所有类可见</li>\n<li>protected 对本包和所有子类可见</li>\n<li>未指定 本包可见</li>\n</ul>\n<h4 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h4><ul>\n<li>抽象类中可以不定义抽象方法</li>\n<li>不可创建抽象类的对象，可创建变量指向其子类实例对象</li>\n<li>子类若是抽象类可不实现父类抽象方法</li>\n</ul>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><h2 id=\"常量和变量\"><a href=\"#常量和变量\" class=\"headerlink\" title=\"常量和变量\"></a>常量和变量</h2><h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>final修饰的变量，只能初始化依次，变成了常量</p>\n"},{"title":"运算符","date":"2024-04-19T09:01:06.000Z","urlName":"运算符","_content":"## 运算符\n- 算术运算符: +，-，*，/，%，++，-- \n- 赋值运算符 =  +=，-=，*=，/=  \n- 关系运算符: >，<，>=，<=，==，!=  \n- 逻辑运算符: &&，||，! \n- 位运算符: &，|，^（异或，相同为0不同为1） ，~ ， >>，<<，>>> (了解！！！) \n- 条件运算符 ？：\n\n## 类型转换\n类型转换的方向  \n低------------------------------------------------------>高  \n  byte —> short,char—>int —>long—>float —>double\n\n  ","source":"_posts/JAVA/基础/1-2运算符.md","raw":"---\ntitle: 运算符\ndate: 2024-04-19 17:01:06\ntags:\nurlName: 运算符\n---\n## 运算符\n- 算术运算符: +，-，*，/，%，++，-- \n- 赋值运算符 =  +=，-=，*=，/=  \n- 关系运算符: >，<，>=，<=，==，!=  \n- 逻辑运算符: &&，||，! \n- 位运算符: &，|，^（异或，相同为0不同为1） ，~ ， >>，<<，>>> (了解！！！) \n- 条件运算符 ？：\n\n## 类型转换\n类型转换的方向  \n低------------------------------------------------------>高  \n  byte —> short,char—>int —>long—>float —>double\n\n  ","slug":"JAVA/基础/1-2运算符","published":1,"updated":"2024-04-21T15:17:15.473Z","_id":"clv9oh4pe00033cv02wv16y3k","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>算术运算符: +，-，*，&#x2F;，%，++，– </li>\n<li>赋值运算符 &#x3D;  +&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;  </li>\n<li>关系运算符: &gt;，&lt;，&gt;&#x3D;，&lt;&#x3D;，&#x3D;&#x3D;，!&#x3D;  </li>\n<li>逻辑运算符: &amp;&amp;，||，! </li>\n<li>位运算符: &amp;，|，^（异或，相同为0不同为1） ，~ ， &gt;&gt;，&lt;&lt;，&gt;&gt;&gt; (了解！！！) </li>\n<li>条件运算符 ？：</li>\n</ul>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>类型转换的方向<br>低——————————————————&gt;高<br>  byte —&gt; short,char—&gt;int —&gt;long—&gt;float —&gt;double</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>算术运算符: +，-，*，&#x2F;，%，++，– </li>\n<li>赋值运算符 &#x3D;  +&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;  </li>\n<li>关系运算符: &gt;，&lt;，&gt;&#x3D;，&lt;&#x3D;，&#x3D;&#x3D;，!&#x3D;  </li>\n<li>逻辑运算符: &amp;&amp;，||，! </li>\n<li>位运算符: &amp;，|，^（异或，相同为0不同为1） ，~ ， &gt;&gt;，&lt;&lt;，&gt;&gt;&gt; (了解！！！) </li>\n<li>条件运算符 ？：</li>\n</ul>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>类型转换的方向<br>低——————————————————&gt;高<br>  byte —&gt; short,char—&gt;int —&gt;long—&gt;float —&gt;double</p>\n"},{"title":"递归","date":"2024-04-19T09:01:06.000Z","_content":"直接或间接调用自身的方法\n### 要点\n- 结束条件\n- 递归体\n### 问题\n- 栈溢出\n- 重复计算","source":"_posts/JAVA/基础/1-3递归.md","raw":"---\ntitle: 递归\ndate: 2024-04-19 17:01:06\ntags:\n---\n直接或间接调用自身的方法\n### 要点\n- 结束条件\n- 递归体\n### 问题\n- 栈溢出\n- 重复计算","slug":"JAVA/基础/1-3递归","published":1,"updated":"2024-04-19T01:50:38.101Z","_id":"clv9oh4pf00043cv03yji4xny","comments":1,"layout":"post","photos":[],"link":"","content":"<p>直接或间接调用自身的方法</p>\n<h3 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h3><ul>\n<li>结束条件</li>\n<li>递归体</li>\n</ul>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ul>\n<li>栈溢出</li>\n<li>重复计算</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>直接或间接调用自身的方法</p>\n<h3 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h3><ul>\n<li>结束条件</li>\n<li>递归体</li>\n</ul>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ul>\n<li>栈溢出</li>\n<li>重复计算</li>\n</ul>\n"},{"title":"4-10类设计技巧","date":"2024-04-20T13:11:49.000Z","_content":"\n1. 保证数据私有 ，不要破坏封装性，\n2. 初始化数据（设置默认值）\n3. 不在类中过多使用基本类型，\n4. 不是所有域都需要独立的访问器和更改器\n5. 分解职责过多的类\n5.1 类、超类和子类","source":"_posts/JAVA/基础/4-10类设计技巧.md","raw":"---\ntitle: 4-10类设计技巧\ndate: 2024-04-20 21:11:49\ntags:\n---\n\n1. 保证数据私有 ，不要破坏封装性，\n2. 初始化数据（设置默认值）\n3. 不在类中过多使用基本类型，\n4. 不是所有域都需要独立的访问器和更改器\n5. 分解职责过多的类\n5.1 类、超类和子类","slug":"JAVA/基础/4-10类设计技巧","published":1,"updated":"2024-04-20T15:55:24.258Z","_id":"clv9oh4ph00053cv0g4ws7ar9","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li>保证数据私有 ，不要破坏封装性，</li>\n<li>初始化数据（设置默认值）</li>\n<li>不在类中过多使用基本类型，</li>\n<li>不是所有域都需要独立的访问器和更改器</li>\n<li>分解职责过多的类<br>5.1 类、超类和子类</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>保证数据私有 ，不要破坏封装性，</li>\n<li>初始化数据（设置默认值）</li>\n<li>不在类中过多使用基本类型，</li>\n<li>不是所有域都需要独立的访问器和更改器</li>\n<li>分解职责过多的类<br>5.1 类、超类和子类</li>\n</ol>\n"},{"title":"其他","date":"2024-04-20T02:51:58.000Z","_content":"##### System.exit(n)n 的值对程序运行的作用\n退出标识，根据不同标识可触发不同操作\n\n为什么类内部声明私有属性，但提供公开的getter，setter方法？\n1. 可以改变getter，setter方法的实现，不影响其他代码\n2. setter方法可做数据检查\n\n##### 使用静态方法的场景\n1. 方法不访问对象状态，方法需要的参数都是通过显示参数提供\n2. 方法只需要访问类的静态域\n\n##### 方法参数使用情况\n1. 方法不能修改基本数据类型的参数\n2. 方法可以改变一个对象参数的状态\n3. 方法不能让对象参数引用一个新对象\n\n##### 初始化块\n在构造函数前执行\n\n##### java析构方法finalize\n- java不支持，但可自己添加finalize方法。\n- 在垃圾回收前调用，但调用时机不确定（所以不要依赖他释放资源）\n- System.mnFinalizersOnExit(true) 的方法能够确保 finalizer 方法在 Java 关\n闭前被调用，但不安全，不鼓励使用。替代方案：Runtime.addShutdownHook 添加关闭钩；手动调用close方法关闭\n\n##### javadoc使用方法？？？\n...  \n\n##### final\n将方法或类声明为final的意义：确保它们不会在子类中改变语义\nfinal 修饰域（字段） 赋值后不可修改\nfinal 修饰方法 子类不可重写\nfinal 修饰类 子类不可重写父类方法\n\n内联：如果一个方法没有被覆盖并且很短， 编译器就能够对它进行优化处理（编译时优化）， 这个过程为称为内联\n( inlining )。例如，内联调用 e.getName( ) 将被替换为访问 e.name 域。\n\n##### 重载\n重载父类方法时，返回值应是父类返回值或其子类\n\n##### 比较相等\n###### == \n- 比较对象为基本数据类型时，比较的是数据的大小\n- 比较对象为引用类型时，比较的是引用类型中存放的地址\n###### equals\n- object 类 使用 == 实现，比较引用相同则返回true    \n- String Integer Date file 此四个类java实现时覆盖了Object类的实现，其他没有覆盖的类使用Object类实现\n    1. String 值相同则相同（内部实现：先比较引用，想通返回true；再比较字符，相同则返回true）Integer 值相同则相同\n    2. Integer 值相同则相同\n\n###### Integer 特殊说明\n```\nInteger n1=128;\nInteger n2=128;\nSystem.out.print(\"n1==n2:\");\nSystem.out.println(n1==n2);//false\n\nInteger n3=127;\nInteger n4=127;\nSystem.out.print(\"n3==n4:\");\nSystem.out.println(n3==n4);//true\n```\nInteger包装类型中存在自动装箱的情况，  \n当数据范围在-128～127之间时，创建的对象会在方法区的常量池中开辟空间（可复用），  \n数据超出范围就会在堆区中开辟空间，  \n由于指向不同对象所以n1==n2判等的结果为false，n3与n4指向常量池同一地址所以判等结果为true。\n###### Objects.equals(a,b)\n- 两个参数都是null 返回true\n\n实现：\n```\npublic static boolean equals(Object a, Object b) {\n    return (a == b) || (a != null && a.equals(b));\n}\n```\n\n###### 编写一个完美的 equals 方法的建议：\n1. 显式参数命名为 otherObject, 稍后需要将它转换成另一个叫做 other 的变量。\n2. 检测 this 与 otherObject 是否引用同一个对象：```if (this = otherObject) return true;```\n3. 检测 otherObject 是否为 null, 如 果 为 null, 返 回 false。```if (otherObject = null) return false;```\n4. 比较 this 与 otherObject 是否属于同一个类。如果 equals 的语义在每个子类中有所改\n变，就使用 getClass 检测：```if (getClass() != otherObject.getCIassO) return false;```如果所有的子类都拥有统一的语义，就使用 instanceof 检测：```if (!(otherObject instanceof ClassName)) return false;```\n5.  将 otherObject 转换为相应的类类型变量：```ClassName other = (ClassName) otherObject```\n6. 对所有需要比较的域进行比较了。使用=比较基本类型域，使用 equals 比\n较对象域。如果所有的域都匹配， 就返回 true; 否 则 返 回 false\n```\nreturn fieldl == other.field\n&& Objects.equa1s(fie1d2, other.field2)\n&& ...;\n```\n\n<i>实现equals时的常见错误：</i>\n以下代码声明了一个新equals 没有覆盖object类的equals\n```©Override public boolean equals(Object other)```\n```\npublic class Employee\n{\n    public boolean equals(Employee other) //\n    {\n        return other != null\n        && getClassO == other.getClass0\n        && Objects.equals(name , other.name)\n        && salary— other,sal ary\n        && Objects.equals(hireDay, other.hireDay)\n    }\n}\n```\n\n\n\n\n##### hashcode\n- 返回一个整形数值（可负数）\n- 合理组合字段的散列码（以便不同对象的散列码均匀分布）\n例如：\n```\npublic class Employee{\n    public int hashCode(){\n        return 7 * name.hashCode0\n            + 11 * new Double(salary).hashCode0\n            + 13 * hireDay.hashCode();\n    }\n}\n\n\n//更好的方法1 ：使用null 安全的方法 Objects.hashCode。\npublic int hashCode(){\n    return 7 * Objects.hashCode(name)\n        + 11 * Double.hashCode(salary)\n        + 13 * Objects.hashCode(hireDay);\n}\n\n//更好的方法2 ：\npublic int hashCodeO\n{\nreturn Objects.hash(name, salary, hireDay);\n}\n\n其他数组散列码：Arrays.hashCode\n\n```\n- Equals 与 hashCode 的定义必须一致：如果 x.equals(y) 返回 true, 那么 x.hashCode( ) 就必须与 y.hashCode( ) 具有相同的值。例如， 如果用定义的 Employee.equals 比较雇员的ID，那么 hashCode 方法就需要散列 ID，而不是雇员的姓名或存储地址。\n\n##### toString\n数组：Arrary.toString()\n\n##### ArraryList.trimTosize()\n确认数组列表的大小不再发生变化，就可以调用 trimToSize方法,将\n存储区域的大小调整为当前元素数量所需要的存储空间数目。垃圾回收器将回收多余的存储\n空间。","source":"_posts/JAVA/基础/其他.md","raw":"---\ntitle: 其他\ndate: 2024-04-20 10:51:58\ntags:\n---\n##### System.exit(n)n 的值对程序运行的作用\n退出标识，根据不同标识可触发不同操作\n\n为什么类内部声明私有属性，但提供公开的getter，setter方法？\n1. 可以改变getter，setter方法的实现，不影响其他代码\n2. setter方法可做数据检查\n\n##### 使用静态方法的场景\n1. 方法不访问对象状态，方法需要的参数都是通过显示参数提供\n2. 方法只需要访问类的静态域\n\n##### 方法参数使用情况\n1. 方法不能修改基本数据类型的参数\n2. 方法可以改变一个对象参数的状态\n3. 方法不能让对象参数引用一个新对象\n\n##### 初始化块\n在构造函数前执行\n\n##### java析构方法finalize\n- java不支持，但可自己添加finalize方法。\n- 在垃圾回收前调用，但调用时机不确定（所以不要依赖他释放资源）\n- System.mnFinalizersOnExit(true) 的方法能够确保 finalizer 方法在 Java 关\n闭前被调用，但不安全，不鼓励使用。替代方案：Runtime.addShutdownHook 添加关闭钩；手动调用close方法关闭\n\n##### javadoc使用方法？？？\n...  \n\n##### final\n将方法或类声明为final的意义：确保它们不会在子类中改变语义\nfinal 修饰域（字段） 赋值后不可修改\nfinal 修饰方法 子类不可重写\nfinal 修饰类 子类不可重写父类方法\n\n内联：如果一个方法没有被覆盖并且很短， 编译器就能够对它进行优化处理（编译时优化）， 这个过程为称为内联\n( inlining )。例如，内联调用 e.getName( ) 将被替换为访问 e.name 域。\n\n##### 重载\n重载父类方法时，返回值应是父类返回值或其子类\n\n##### 比较相等\n###### == \n- 比较对象为基本数据类型时，比较的是数据的大小\n- 比较对象为引用类型时，比较的是引用类型中存放的地址\n###### equals\n- object 类 使用 == 实现，比较引用相同则返回true    \n- String Integer Date file 此四个类java实现时覆盖了Object类的实现，其他没有覆盖的类使用Object类实现\n    1. String 值相同则相同（内部实现：先比较引用，想通返回true；再比较字符，相同则返回true）Integer 值相同则相同\n    2. Integer 值相同则相同\n\n###### Integer 特殊说明\n```\nInteger n1=128;\nInteger n2=128;\nSystem.out.print(\"n1==n2:\");\nSystem.out.println(n1==n2);//false\n\nInteger n3=127;\nInteger n4=127;\nSystem.out.print(\"n3==n4:\");\nSystem.out.println(n3==n4);//true\n```\nInteger包装类型中存在自动装箱的情况，  \n当数据范围在-128～127之间时，创建的对象会在方法区的常量池中开辟空间（可复用），  \n数据超出范围就会在堆区中开辟空间，  \n由于指向不同对象所以n1==n2判等的结果为false，n3与n4指向常量池同一地址所以判等结果为true。\n###### Objects.equals(a,b)\n- 两个参数都是null 返回true\n\n实现：\n```\npublic static boolean equals(Object a, Object b) {\n    return (a == b) || (a != null && a.equals(b));\n}\n```\n\n###### 编写一个完美的 equals 方法的建议：\n1. 显式参数命名为 otherObject, 稍后需要将它转换成另一个叫做 other 的变量。\n2. 检测 this 与 otherObject 是否引用同一个对象：```if (this = otherObject) return true;```\n3. 检测 otherObject 是否为 null, 如 果 为 null, 返 回 false。```if (otherObject = null) return false;```\n4. 比较 this 与 otherObject 是否属于同一个类。如果 equals 的语义在每个子类中有所改\n变，就使用 getClass 检测：```if (getClass() != otherObject.getCIassO) return false;```如果所有的子类都拥有统一的语义，就使用 instanceof 检测：```if (!(otherObject instanceof ClassName)) return false;```\n5.  将 otherObject 转换为相应的类类型变量：```ClassName other = (ClassName) otherObject```\n6. 对所有需要比较的域进行比较了。使用=比较基本类型域，使用 equals 比\n较对象域。如果所有的域都匹配， 就返回 true; 否 则 返 回 false\n```\nreturn fieldl == other.field\n&& Objects.equa1s(fie1d2, other.field2)\n&& ...;\n```\n\n<i>实现equals时的常见错误：</i>\n以下代码声明了一个新equals 没有覆盖object类的equals\n```©Override public boolean equals(Object other)```\n```\npublic class Employee\n{\n    public boolean equals(Employee other) //\n    {\n        return other != null\n        && getClassO == other.getClass0\n        && Objects.equals(name , other.name)\n        && salary— other,sal ary\n        && Objects.equals(hireDay, other.hireDay)\n    }\n}\n```\n\n\n\n\n##### hashcode\n- 返回一个整形数值（可负数）\n- 合理组合字段的散列码（以便不同对象的散列码均匀分布）\n例如：\n```\npublic class Employee{\n    public int hashCode(){\n        return 7 * name.hashCode0\n            + 11 * new Double(salary).hashCode0\n            + 13 * hireDay.hashCode();\n    }\n}\n\n\n//更好的方法1 ：使用null 安全的方法 Objects.hashCode。\npublic int hashCode(){\n    return 7 * Objects.hashCode(name)\n        + 11 * Double.hashCode(salary)\n        + 13 * Objects.hashCode(hireDay);\n}\n\n//更好的方法2 ：\npublic int hashCodeO\n{\nreturn Objects.hash(name, salary, hireDay);\n}\n\n其他数组散列码：Arrays.hashCode\n\n```\n- Equals 与 hashCode 的定义必须一致：如果 x.equals(y) 返回 true, 那么 x.hashCode( ) 就必须与 y.hashCode( ) 具有相同的值。例如， 如果用定义的 Employee.equals 比较雇员的ID，那么 hashCode 方法就需要散列 ID，而不是雇员的姓名或存储地址。\n\n##### toString\n数组：Arrary.toString()\n\n##### ArraryList.trimTosize()\n确认数组列表的大小不再发生变化，就可以调用 trimToSize方法,将\n存储区域的大小调整为当前元素数量所需要的存储空间数目。垃圾回收器将回收多余的存储\n空间。","slug":"JAVA/基础/其他","published":1,"updated":"2024-04-21T13:44:00.760Z","_id":"clv9oh4pi00063cv09y7xeidm","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"System-exit-n-n-的值对程序运行的作用\"><a href=\"#System-exit-n-n-的值对程序运行的作用\" class=\"headerlink\" title=\"System.exit(n)n 的值对程序运行的作用\"></a>System.exit(n)n 的值对程序运行的作用</h5><p>退出标识，根据不同标识可触发不同操作</p>\n<p>为什么类内部声明私有属性，但提供公开的getter，setter方法？</p>\n<ol>\n<li>可以改变getter，setter方法的实现，不影响其他代码</li>\n<li>setter方法可做数据检查</li>\n</ol>\n<h5 id=\"使用静态方法的场景\"><a href=\"#使用静态方法的场景\" class=\"headerlink\" title=\"使用静态方法的场景\"></a>使用静态方法的场景</h5><ol>\n<li>方法不访问对象状态，方法需要的参数都是通过显示参数提供</li>\n<li>方法只需要访问类的静态域</li>\n</ol>\n<h5 id=\"方法参数使用情况\"><a href=\"#方法参数使用情况\" class=\"headerlink\" title=\"方法参数使用情况\"></a>方法参数使用情况</h5><ol>\n<li>方法不能修改基本数据类型的参数</li>\n<li>方法可以改变一个对象参数的状态</li>\n<li>方法不能让对象参数引用一个新对象</li>\n</ol>\n<h5 id=\"初始化块\"><a href=\"#初始化块\" class=\"headerlink\" title=\"初始化块\"></a>初始化块</h5><p>在构造函数前执行</p>\n<h5 id=\"java析构方法finalize\"><a href=\"#java析构方法finalize\" class=\"headerlink\" title=\"java析构方法finalize\"></a>java析构方法finalize</h5><ul>\n<li>java不支持，但可自己添加finalize方法。</li>\n<li>在垃圾回收前调用，但调用时机不确定（所以不要依赖他释放资源）</li>\n<li>System.mnFinalizersOnExit(true) 的方法能够确保 finalizer 方法在 Java 关<br>闭前被调用，但不安全，不鼓励使用。替代方案：Runtime.addShutdownHook 添加关闭钩；手动调用close方法关闭</li>\n</ul>\n<h5 id=\"javadoc使用方法？？？\"><a href=\"#javadoc使用方法？？？\" class=\"headerlink\" title=\"javadoc使用方法？？？\"></a>javadoc使用方法？？？</h5><p>…  </p>\n<h5 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h5><p>将方法或类声明为final的意义：确保它们不会在子类中改变语义<br>final 修饰域（字段） 赋值后不可修改<br>final 修饰方法 子类不可重写<br>final 修饰类 子类不可重写父类方法</p>\n<p>内联：如果一个方法没有被覆盖并且很短， 编译器就能够对它进行优化处理（编译时优化）， 这个过程为称为内联<br>( inlining )。例如，内联调用 e.getName( ) 将被替换为访问 e.name 域。</p>\n<h5 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h5><p>重载父类方法时，返回值应是父类返回值或其子类</p>\n<h5 id=\"比较相等\"><a href=\"#比较相等\" class=\"headerlink\" title=\"比较相等\"></a>比较相等</h5><h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&#x3D;&#x3D;\"></a>&#x3D;&#x3D;</h6><ul>\n<li>比较对象为基本数据类型时，比较的是数据的大小</li>\n<li>比较对象为引用类型时，比较的是引用类型中存放的地址</li>\n</ul>\n<h6 id=\"equals\"><a href=\"#equals\" class=\"headerlink\" title=\"equals\"></a>equals</h6><ul>\n<li>object 类 使用 &#x3D;&#x3D; 实现，比较引用相同则返回true    </li>\n<li>String Integer Date file 此四个类java实现时覆盖了Object类的实现，其他没有覆盖的类使用Object类实现<ol>\n<li>String 值相同则相同（内部实现：先比较引用，想通返回true；再比较字符，相同则返回true）Integer 值相同则相同</li>\n<li>Integer 值相同则相同</li>\n</ol>\n</li>\n</ul>\n<h6 id=\"Integer-特殊说明\"><a href=\"#Integer-特殊说明\" class=\"headerlink\" title=\"Integer 特殊说明\"></a>Integer 特殊说明</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer n1=128;</span><br><span class=\"line\">Integer n2=128;</span><br><span class=\"line\">System.out.print(&quot;n1==n2:&quot;);</span><br><span class=\"line\">System.out.println(n1==n2);//false</span><br><span class=\"line\"></span><br><span class=\"line\">Integer n3=127;</span><br><span class=\"line\">Integer n4=127;</span><br><span class=\"line\">System.out.print(&quot;n3==n4:&quot;);</span><br><span class=\"line\">System.out.println(n3==n4);//true</span><br></pre></td></tr></table></figure>\n<p>Integer包装类型中存在自动装箱的情况，<br>当数据范围在-128～127之间时，创建的对象会在方法区的常量池中开辟空间（可复用），<br>数据超出范围就会在堆区中开辟空间，<br>由于指向不同对象所以n1&#x3D;&#x3D;n2判等的结果为false，n3与n4指向常量池同一地址所以判等结果为true。</p>\n<h6 id=\"Objects-equals-a-b\"><a href=\"#Objects-equals-a-b\" class=\"headerlink\" title=\"Objects.equals(a,b)\"></a>Objects.equals(a,b)</h6><ul>\n<li>两个参数都是null 返回true</li>\n</ul>\n<p>实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean equals(Object a, Object b) &#123;</span><br><span class=\"line\">    return (a == b) || (a != null &amp;&amp; a.equals(b));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"编写一个完美的-equals-方法的建议：\"><a href=\"#编写一个完美的-equals-方法的建议：\" class=\"headerlink\" title=\"编写一个完美的 equals 方法的建议：\"></a>编写一个完美的 equals 方法的建议：</h6><ol>\n<li>显式参数命名为 otherObject, 稍后需要将它转换成另一个叫做 other 的变量。</li>\n<li>检测 this 与 otherObject 是否引用同一个对象：<code>if (this = otherObject) return true;</code></li>\n<li>检测 otherObject 是否为 null, 如 果 为 null, 返 回 false。<code>if (otherObject = null) return false;</code></li>\n<li>比较 this 与 otherObject 是否属于同一个类。如果 equals 的语义在每个子类中有所改<br>变，就使用 getClass 检测：<code>if (getClass() != otherObject.getCIassO) return false;</code>如果所有的子类都拥有统一的语义，就使用 instanceof 检测：<code>if (!(otherObject instanceof ClassName)) return false;</code></li>\n<li>将 otherObject 转换为相应的类类型变量：<code>ClassName other = (ClassName) otherObject</code></li>\n<li>对所有需要比较的域进行比较了。使用&#x3D;比较基本类型域，使用 equals 比<br>较对象域。如果所有的域都匹配， 就返回 true; 否 则 返 回 false<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return fieldl == other.field</span><br><span class=\"line\">&amp;&amp; Objects.equa1s(fie1d2, other.field2)</span><br><span class=\"line\">&amp;&amp; ...;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><i>实现equals时的常见错误：</i><br>以下代码声明了一个新equals 没有覆盖object类的equals<br><code>©Override public boolean equals(Object other)</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Employee</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public boolean equals(Employee other) //</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return other != null</span><br><span class=\"line\">        &amp;&amp; getClassO == other.getClass0</span><br><span class=\"line\">        &amp;&amp; Objects.equals(name , other.name)</span><br><span class=\"line\">        &amp;&amp; salary— other,sal ary</span><br><span class=\"line\">        &amp;&amp; Objects.equals(hireDay, other.hireDay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h5 id=\"hashcode\"><a href=\"#hashcode\" class=\"headerlink\" title=\"hashcode\"></a>hashcode</h5><ul>\n<li>返回一个整形数值（可负数）</li>\n<li>合理组合字段的散列码（以便不同对象的散列码均匀分布）<br>例如：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">    public int hashCode()&#123;</span><br><span class=\"line\">        return 7 * name.hashCode0</span><br><span class=\"line\">            + 11 * new Double(salary).hashCode0</span><br><span class=\"line\">            + 13 * hireDay.hashCode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//更好的方法1 ：使用null 安全的方法 Objects.hashCode。</span><br><span class=\"line\">public int hashCode()&#123;</span><br><span class=\"line\">    return 7 * Objects.hashCode(name)</span><br><span class=\"line\">        + 11 * Double.hashCode(salary)</span><br><span class=\"line\">        + 13 * Objects.hashCode(hireDay);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//更好的方法2 ：</span><br><span class=\"line\">public int hashCodeO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">return Objects.hash(name, salary, hireDay);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">其他数组散列码：Arrays.hashCode</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>Equals 与 hashCode 的定义必须一致：如果 x.equals(y) 返回 true, 那么 x.hashCode( ) 就必须与 y.hashCode( ) 具有相同的值。例如， 如果用定义的 Employee.equals 比较雇员的ID，那么 hashCode 方法就需要散列 ID，而不是雇员的姓名或存储地址。</li>\n</ul>\n<h5 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString\"></a>toString</h5><p>数组：Arrary.toString()</p>\n<h5 id=\"ArraryList-trimTosize\"><a href=\"#ArraryList-trimTosize\" class=\"headerlink\" title=\"ArraryList.trimTosize()\"></a>ArraryList.trimTosize()</h5><p>确认数组列表的大小不再发生变化，就可以调用 trimToSize方法,将<br>存储区域的大小调整为当前元素数量所需要的存储空间数目。垃圾回收器将回收多余的存储<br>空间。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"System-exit-n-n-的值对程序运行的作用\"><a href=\"#System-exit-n-n-的值对程序运行的作用\" class=\"headerlink\" title=\"System.exit(n)n 的值对程序运行的作用\"></a>System.exit(n)n 的值对程序运行的作用</h5><p>退出标识，根据不同标识可触发不同操作</p>\n<p>为什么类内部声明私有属性，但提供公开的getter，setter方法？</p>\n<ol>\n<li>可以改变getter，setter方法的实现，不影响其他代码</li>\n<li>setter方法可做数据检查</li>\n</ol>\n<h5 id=\"使用静态方法的场景\"><a href=\"#使用静态方法的场景\" class=\"headerlink\" title=\"使用静态方法的场景\"></a>使用静态方法的场景</h5><ol>\n<li>方法不访问对象状态，方法需要的参数都是通过显示参数提供</li>\n<li>方法只需要访问类的静态域</li>\n</ol>\n<h5 id=\"方法参数使用情况\"><a href=\"#方法参数使用情况\" class=\"headerlink\" title=\"方法参数使用情况\"></a>方法参数使用情况</h5><ol>\n<li>方法不能修改基本数据类型的参数</li>\n<li>方法可以改变一个对象参数的状态</li>\n<li>方法不能让对象参数引用一个新对象</li>\n</ol>\n<h5 id=\"初始化块\"><a href=\"#初始化块\" class=\"headerlink\" title=\"初始化块\"></a>初始化块</h5><p>在构造函数前执行</p>\n<h5 id=\"java析构方法finalize\"><a href=\"#java析构方法finalize\" class=\"headerlink\" title=\"java析构方法finalize\"></a>java析构方法finalize</h5><ul>\n<li>java不支持，但可自己添加finalize方法。</li>\n<li>在垃圾回收前调用，但调用时机不确定（所以不要依赖他释放资源）</li>\n<li>System.mnFinalizersOnExit(true) 的方法能够确保 finalizer 方法在 Java 关<br>闭前被调用，但不安全，不鼓励使用。替代方案：Runtime.addShutdownHook 添加关闭钩；手动调用close方法关闭</li>\n</ul>\n<h5 id=\"javadoc使用方法？？？\"><a href=\"#javadoc使用方法？？？\" class=\"headerlink\" title=\"javadoc使用方法？？？\"></a>javadoc使用方法？？？</h5><p>…  </p>\n<h5 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h5><p>将方法或类声明为final的意义：确保它们不会在子类中改变语义<br>final 修饰域（字段） 赋值后不可修改<br>final 修饰方法 子类不可重写<br>final 修饰类 子类不可重写父类方法</p>\n<p>内联：如果一个方法没有被覆盖并且很短， 编译器就能够对它进行优化处理（编译时优化）， 这个过程为称为内联<br>( inlining )。例如，内联调用 e.getName( ) 将被替换为访问 e.name 域。</p>\n<h5 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h5><p>重载父类方法时，返回值应是父类返回值或其子类</p>\n<h5 id=\"比较相等\"><a href=\"#比较相等\" class=\"headerlink\" title=\"比较相等\"></a>比较相等</h5><h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&#x3D;&#x3D;\"></a>&#x3D;&#x3D;</h6><ul>\n<li>比较对象为基本数据类型时，比较的是数据的大小</li>\n<li>比较对象为引用类型时，比较的是引用类型中存放的地址</li>\n</ul>\n<h6 id=\"equals\"><a href=\"#equals\" class=\"headerlink\" title=\"equals\"></a>equals</h6><ul>\n<li>object 类 使用 &#x3D;&#x3D; 实现，比较引用相同则返回true    </li>\n<li>String Integer Date file 此四个类java实现时覆盖了Object类的实现，其他没有覆盖的类使用Object类实现<ol>\n<li>String 值相同则相同（内部实现：先比较引用，想通返回true；再比较字符，相同则返回true）Integer 值相同则相同</li>\n<li>Integer 值相同则相同</li>\n</ol>\n</li>\n</ul>\n<h6 id=\"Integer-特殊说明\"><a href=\"#Integer-特殊说明\" class=\"headerlink\" title=\"Integer 特殊说明\"></a>Integer 特殊说明</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer n1=128;</span><br><span class=\"line\">Integer n2=128;</span><br><span class=\"line\">System.out.print(&quot;n1==n2:&quot;);</span><br><span class=\"line\">System.out.println(n1==n2);//false</span><br><span class=\"line\"></span><br><span class=\"line\">Integer n3=127;</span><br><span class=\"line\">Integer n4=127;</span><br><span class=\"line\">System.out.print(&quot;n3==n4:&quot;);</span><br><span class=\"line\">System.out.println(n3==n4);//true</span><br></pre></td></tr></table></figure>\n<p>Integer包装类型中存在自动装箱的情况，<br>当数据范围在-128～127之间时，创建的对象会在方法区的常量池中开辟空间（可复用），<br>数据超出范围就会在堆区中开辟空间，<br>由于指向不同对象所以n1&#x3D;&#x3D;n2判等的结果为false，n3与n4指向常量池同一地址所以判等结果为true。</p>\n<h6 id=\"Objects-equals-a-b\"><a href=\"#Objects-equals-a-b\" class=\"headerlink\" title=\"Objects.equals(a,b)\"></a>Objects.equals(a,b)</h6><ul>\n<li>两个参数都是null 返回true</li>\n</ul>\n<p>实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean equals(Object a, Object b) &#123;</span><br><span class=\"line\">    return (a == b) || (a != null &amp;&amp; a.equals(b));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"编写一个完美的-equals-方法的建议：\"><a href=\"#编写一个完美的-equals-方法的建议：\" class=\"headerlink\" title=\"编写一个完美的 equals 方法的建议：\"></a>编写一个完美的 equals 方法的建议：</h6><ol>\n<li>显式参数命名为 otherObject, 稍后需要将它转换成另一个叫做 other 的变量。</li>\n<li>检测 this 与 otherObject 是否引用同一个对象：<code>if (this = otherObject) return true;</code></li>\n<li>检测 otherObject 是否为 null, 如 果 为 null, 返 回 false。<code>if (otherObject = null) return false;</code></li>\n<li>比较 this 与 otherObject 是否属于同一个类。如果 equals 的语义在每个子类中有所改<br>变，就使用 getClass 检测：<code>if (getClass() != otherObject.getCIassO) return false;</code>如果所有的子类都拥有统一的语义，就使用 instanceof 检测：<code>if (!(otherObject instanceof ClassName)) return false;</code></li>\n<li>将 otherObject 转换为相应的类类型变量：<code>ClassName other = (ClassName) otherObject</code></li>\n<li>对所有需要比较的域进行比较了。使用&#x3D;比较基本类型域，使用 equals 比<br>较对象域。如果所有的域都匹配， 就返回 true; 否 则 返 回 false<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return fieldl == other.field</span><br><span class=\"line\">&amp;&amp; Objects.equa1s(fie1d2, other.field2)</span><br><span class=\"line\">&amp;&amp; ...;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><i>实现equals时的常见错误：</i><br>以下代码声明了一个新equals 没有覆盖object类的equals<br><code>©Override public boolean equals(Object other)</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Employee</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public boolean equals(Employee other) //</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return other != null</span><br><span class=\"line\">        &amp;&amp; getClassO == other.getClass0</span><br><span class=\"line\">        &amp;&amp; Objects.equals(name , other.name)</span><br><span class=\"line\">        &amp;&amp; salary— other,sal ary</span><br><span class=\"line\">        &amp;&amp; Objects.equals(hireDay, other.hireDay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h5 id=\"hashcode\"><a href=\"#hashcode\" class=\"headerlink\" title=\"hashcode\"></a>hashcode</h5><ul>\n<li>返回一个整形数值（可负数）</li>\n<li>合理组合字段的散列码（以便不同对象的散列码均匀分布）<br>例如：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">    public int hashCode()&#123;</span><br><span class=\"line\">        return 7 * name.hashCode0</span><br><span class=\"line\">            + 11 * new Double(salary).hashCode0</span><br><span class=\"line\">            + 13 * hireDay.hashCode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//更好的方法1 ：使用null 安全的方法 Objects.hashCode。</span><br><span class=\"line\">public int hashCode()&#123;</span><br><span class=\"line\">    return 7 * Objects.hashCode(name)</span><br><span class=\"line\">        + 11 * Double.hashCode(salary)</span><br><span class=\"line\">        + 13 * Objects.hashCode(hireDay);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//更好的方法2 ：</span><br><span class=\"line\">public int hashCodeO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">return Objects.hash(name, salary, hireDay);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">其他数组散列码：Arrays.hashCode</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>Equals 与 hashCode 的定义必须一致：如果 x.equals(y) 返回 true, 那么 x.hashCode( ) 就必须与 y.hashCode( ) 具有相同的值。例如， 如果用定义的 Employee.equals 比较雇员的ID，那么 hashCode 方法就需要散列 ID，而不是雇员的姓名或存储地址。</li>\n</ul>\n<h5 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString\"></a>toString</h5><p>数组：Arrary.toString()</p>\n<h5 id=\"ArraryList-trimTosize\"><a href=\"#ArraryList-trimTosize\" class=\"headerlink\" title=\"ArraryList.trimTosize()\"></a>ArraryList.trimTosize()</h5><p>确认数组列表的大小不再发生变化，就可以调用 trimToSize方法,将<br>存储区域的大小调整为当前元素数量所需要的存储空间数目。垃圾回收器将回收多余的存储<br>空间。</p>\n"},{"title":"安装Tomcat","date":"2024-04-22T07:55:43.000Z","_content":"\n","source":"_posts/JAVA/Tomcat/安装Tomcat.md","raw":"---\ntitle: 安装Tomcat\ndate: 2024-04-22 15:55:43\ntags:\n---\n\n","slug":"JAVA/Tomcat/安装Tomcat","published":1,"updated":"2024-04-23T01:34:04.084Z","_id":"clvbp7mpx0000rsv0b2wd9veb","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"枚举","date":"2024-04-22T01:52:42.000Z","_content":"### 定义\n```\nenum Size { SMALL, MEDIUM, LARGE, EXTRA.LARCE };\n\npublic enum Size\n{\n    SMALLfS\"), MEDIUMC'M\"), LARGEfL\"), EXTRA_LARGE(\"XL\");\n    private String abbreviation;\n    private Size(String abbreviation) { this,abbreviation = abbreviation; }\n    public String getAbbreviation() { return abbreviation; }\n}\n```\n\n### 方法\n1. int ordinal ( )\n返回枚举常量在 enum 声明中的位置，位置从 0 开始计数。\n2. int compareTo( E other )\n枚举常量出现在 Other 之前， 则返回一个负值；如果 this=other，则返回 0; 否则，\n返回正值。\n3. static Enum valueOf(Cl ass enumClass , String name )\n4. String toString( ) 返回枚举常量名","source":"_posts/JAVA/基础/枚举.md","raw":"---\ntitle: 枚举\ndate: 2024-04-22 09:52:42\ntags: 枚举\n---\n### 定义\n```\nenum Size { SMALL, MEDIUM, LARGE, EXTRA.LARCE };\n\npublic enum Size\n{\n    SMALLfS\"), MEDIUMC'M\"), LARGEfL\"), EXTRA_LARGE(\"XL\");\n    private String abbreviation;\n    private Size(String abbreviation) { this,abbreviation = abbreviation; }\n    public String getAbbreviation() { return abbreviation; }\n}\n```\n\n### 方法\n1. int ordinal ( )\n返回枚举常量在 enum 声明中的位置，位置从 0 开始计数。\n2. int compareTo( E other )\n枚举常量出现在 Other 之前， 则返回一个负值；如果 this=other，则返回 0; 否则，\n返回正值。\n3. static Enum valueOf(Cl ass enumClass , String name )\n4. String toString( ) 返回枚举常量名","slug":"JAVA/基础/枚举","published":1,"updated":"2024-04-22T02:07:17.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvbp7mqh0001rsv093fc2u55","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Size &#123; SMALL, MEDIUM, LARGE, EXTRA.LARCE &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">public enum Size</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SMALLfS&quot;), MEDIUMC&#x27;M&quot;), LARGEfL&quot;), EXTRA_LARGE(&quot;XL&quot;);</span><br><span class=\"line\">    private String abbreviation;</span><br><span class=\"line\">    private Size(String abbreviation) &#123; this,abbreviation = abbreviation; &#125;</span><br><span class=\"line\">    public String getAbbreviation() &#123; return abbreviation; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ol>\n<li>int ordinal ( )<br>返回枚举常量在 enum 声明中的位置，位置从 0 开始计数。</li>\n<li>int compareTo( E other )<br>枚举常量出现在 Other 之前， 则返回一个负值；如果 this&#x3D;other，则返回 0; 否则，<br>返回正值。</li>\n<li>static Enum valueOf(Cl ass enumClass , String name )</li>\n<li>String toString( ) 返回枚举常量名</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Size &#123; SMALL, MEDIUM, LARGE, EXTRA.LARCE &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">public enum Size</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SMALLfS&quot;), MEDIUMC&#x27;M&quot;), LARGEfL&quot;), EXTRA_LARGE(&quot;XL&quot;);</span><br><span class=\"line\">    private String abbreviation;</span><br><span class=\"line\">    private Size(String abbreviation) &#123; this,abbreviation = abbreviation; &#125;</span><br><span class=\"line\">    public String getAbbreviation() &#123; return abbreviation; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ol>\n<li>int ordinal ( )<br>返回枚举常量在 enum 声明中的位置，位置从 0 开始计数。</li>\n<li>int compareTo( E other )<br>枚举常量出现在 Other 之前， 则返回一个负值；如果 this&#x3D;other，则返回 0; 否则，<br>返回正值。</li>\n<li>static Enum valueOf(Cl ass enumClass , String name )</li>\n<li>String toString( ) 返回枚举常量名</li>\n</ol>\n"},{"title":"反射","date":"2024-04-22T02:07:38.000Z","_content":"### 获取Class\n-  ``` String dassName = \"java.util .Random\";    Class cl = Class.forName(dassName); ```\n- getClass方法\n- ```Class dl = Random.class; Gass cl 2 = int.class;Class cl 3 = Doublet.class;```\n\n### 反射分析类的能力\njava.lang.reflect 包中有三个类 Field、 Method 和 Constructor 分别用于描述类的域、 方\n法和构造器\n\n### 运行时分析对象\n- setAccessible方法 访问私有域，setAccessible是AccessibleObject 类中的一个方法，它是 Field、 Method 和 Constructor\n类的公共超类。\n\n优点：易于编写通用性代码\n缺点：编译时不容易发现问题，运行时易出错。","source":"_posts/JAVA/基础/反射.md","raw":"---\ntitle: 反射\ndate: 2024-04-22 10:07:38\ntags: 反射\n---\n### 获取Class\n-  ``` String dassName = \"java.util .Random\";    Class cl = Class.forName(dassName); ```\n- getClass方法\n- ```Class dl = Random.class; Gass cl 2 = int.class;Class cl 3 = Doublet.class;```\n\n### 反射分析类的能力\njava.lang.reflect 包中有三个类 Field、 Method 和 Constructor 分别用于描述类的域、 方\n法和构造器\n\n### 运行时分析对象\n- setAccessible方法 访问私有域，setAccessible是AccessibleObject 类中的一个方法，它是 Field、 Method 和 Constructor\n类的公共超类。\n\n优点：易于编写通用性代码\n缺点：编译时不容易发现问题，运行时易出错。","slug":"JAVA/基础/反射","published":1,"updated":"2024-04-23T01:34:04.084Z","_id":"clvbp7mql0002rsv07hybgp4g","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"获取Class\"><a href=\"#获取Class\" class=\"headerlink\" title=\"获取Class\"></a>获取Class</h3><ul>\n<li><code>String dassName = &quot;java.util .Random&quot;;    Class cl = Class.forName(dassName);</code></li>\n<li>getClass方法</li>\n<li><code>Class dl = Random.class; Gass cl 2 = int.class;Class cl 3 = Doublet.class;</code></li>\n</ul>\n<h3 id=\"反射分析类的能力\"><a href=\"#反射分析类的能力\" class=\"headerlink\" title=\"反射分析类的能力\"></a>反射分析类的能力</h3><p>java.lang.reflect 包中有三个类 Field、 Method 和 Constructor 分别用于描述类的域、 方<br>法和构造器</p>\n<h3 id=\"运行时分析对象\"><a href=\"#运行时分析对象\" class=\"headerlink\" title=\"运行时分析对象\"></a>运行时分析对象</h3><ul>\n<li>setAccessible方法 访问私有域，setAccessible是AccessibleObject 类中的一个方法，它是 Field、 Method 和 Constructor<br>类的公共超类。</li>\n</ul>\n<p>优点：易于编写通用性代码<br>缺点：编译时不容易发现问题，运行时易出错。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"获取Class\"><a href=\"#获取Class\" class=\"headerlink\" title=\"获取Class\"></a>获取Class</h3><ul>\n<li><code>String dassName = &quot;java.util .Random&quot;;    Class cl = Class.forName(dassName);</code></li>\n<li>getClass方法</li>\n<li><code>Class dl = Random.class; Gass cl 2 = int.class;Class cl 3 = Doublet.class;</code></li>\n</ul>\n<h3 id=\"反射分析类的能力\"><a href=\"#反射分析类的能力\" class=\"headerlink\" title=\"反射分析类的能力\"></a>反射分析类的能力</h3><p>java.lang.reflect 包中有三个类 Field、 Method 和 Constructor 分别用于描述类的域、 方<br>法和构造器</p>\n<h3 id=\"运行时分析对象\"><a href=\"#运行时分析对象\" class=\"headerlink\" title=\"运行时分析对象\"></a>运行时分析对象</h3><ul>\n<li>setAccessible方法 访问私有域，setAccessible是AccessibleObject 类中的一个方法，它是 Field、 Method 和 Constructor<br>类的公共超类。</li>\n</ul>\n<p>优点：易于编写通用性代码<br>缺点：编译时不容易发现问题，运行时易出错。</p>\n"},{"title":"穷爸爸富爸爸","date":"2024-04-23T13:12:55.000Z","_content":"# 序言 这就是你需要的\n# 第一部分 课程\n## 第一章 穷爸爸，富爸爸\n1. 贪财乃万恶之源，\n2. 贫穷才是万恶之本\n\n3. 思考问题，做出自己的选择而不是简单接受或否定\n\n3. 钱是一种力量，但更有力量的是财商教育。钱来了又会去，了解钱是如何运动的，获得驾驭它的力量。就能开始积累财富。\n\n## 第二章 第一课 富人不为钱工作\n多数人都希望有一份工资收入，因为他们都有恐惧和贪婪之心。一开始，没钱的恐惧会促使他们努力工作，得到报酬后，贪婪或欲望又让他们想拥有所有用钱能买到的好东西。于是就形成了一种模式。 起床，上班，付账，再起床，再上班，再付账…… 他们的生活从此被这两种感觉所控制：恐惧和贪婪。给他们更多的钱，他们就会以更高的开支重复这种循环。\n\n<b>弄清楚事情的真相</b>\n无需告诉别人你的感觉，只有你自己知道。\n害怕没有钱，更没有直面这种恐惧，对此他们虽然在情感上有所反应但并没有动脑筋想办法。\n他们手中有点小钱，可享乐、欲望和贪婪会立刻控制他们，他们会再次作出反应，仍然是不假思索。他们的感情代替了他们的思想。\n\n他们并不清楚自己真正的感觉，只是作出反应，而不去思考。他们感到恐惧，于是就去工作，希望钱能消除恐惧，但没有奏效。于是，恐惧追逐着他们，他们只好又去工作，再一次期望钱能平复这种恐惧，但还是没有成功。恐惧使他们落入工作的陷阱，挣钱——工作——挣钱，希望恐惧就此烟消云散。钱主宰着他们的生活，他们拒绝去分辨真相，钱控制了他们的情感和灵魂。\n\n奇怪大人们为什么总是急急忙忙去工作，而工作看起来并没什么乐趣可言，而且他们也不快活，但好像总有些东西逼着他们去工作。\n\n富爸爸说：“我希望你们能避开这个陷阱，这就是我真正想教你们的，而不只是发财，因为发财并不能解决问题。”\n\n\n欲望。有人把它称为贪婪，但我更喜欢用欲望这个词。\n希望拥有一些更好、更漂亮、更有趣或更令人激动的东西，这是相当正常的。\n人们也为了实现欲望而工作。认为钱能买来快乐，可用钱买来的快乐往往是短暂的，所以不久就需要更多的钱来买更多的快乐、更多的开心、更多的舒适和更多的安全感。于是他们继续工作，以为钱能安抚他们备受恐惧和欲望折磨的灵魂，但实际上钱是无法做到这一点的。\n\n许多人致富并非出于欲望而是由于恐惧，他们认为钱能消除贫困带来的恐惧，所以他们积攒了很多的钱，却发现恐惧感更加强烈了。害怕失去钱。一些朋友，已经很有钱了，但还在拼命工作。我还认识一些百万富翁，他们现在甚至比他们穷困时还要恐惧，他们害怕失去所有的钱。他们越富有，这种感觉就越强烈。他们灵魂中软弱贫乏的一面总是在大声尖叫，他们不想失去大房子、车子和钱带给他们的上等生活。他们甚至担心一旦没钱了，朋友们会看不起他们。许多人变得绝望而神经质，尽管他们很富有。\n\n那穷人是不是要快活一点？可不这么认为,不谈钱就像依赖钱一样是一种精神上的疾病。\"我对钱不感兴趣。我工作是因为我热爱这个职业。\"不要用这句话来掩藏他内心真实的感受。\n\n\n我们该怎么办呢？不为钱工作直到不再有恐惧和贪婪吗？不，那只会浪费时间。正是因为有感情，我们才成为人。<i>感情使我们更加真实，它是我们行动的动力。忠实于你的感情，以你喜欢的方式运用你的头脑和感情，不要让它们控制你。</i>\n\n\"去上学，取得好成绩，这样你就能找到一份安稳的工作\"。大多数人都这么给别人建议，而且对于大多数人来说这也确实是个好主意。但人们仍是基于恐惧才给出这样的建议的。\n他担心你将来挣不到钱，在这个社会上过得不好。别误解我的话，他爱你而且希望你能够一帆风顺。我认为他的担心不无道理。教育和工作是很重要的，可它们对付不了恐惧。实际上，促使他每天去上班挣钱的恐惧也使得他热衷于让你去上学。\n\n<b>学会支配钱</b>而不是害怕它，这是在学校里学不到的。如果不学，你就会变成金钱的奴隶。\n\n我们在根本上都是雇员，只是层次不同而已.避开由恐惧和欲望组成的陷阱，按照你们喜欢的方式利用恐惧和欲望，而不要让它们控制你们。如果你们不先控制恐惧和欲望，即使你们获得高薪，也只不过是金钱的奴隶而已。\n\n造成贫困和财务问题的主要原因是恐惧和无知，而不是经济环境、政府或者富人。\n人们自身的恐惧和无知使他们困在陷阱里，所以你们应该去上学、接受高等教育。让我来叫你们如何处理金钱和恐惧，怎样不落入陷阱。\n\n在我用更高的工资诱惑你们时，你们感觉怎样？非常想要吗？你们没有屈服于自己的感觉，你们没有立刻作出决定。这一点最重要。我们总是会有恐惧、贪婪的时候。运用感情作长远打算，别让感情控制了思想。大多数人让恐惧和贪婪来支配自己，这是无知的开始。因为恐惧和贪婪，大多数人一生都在追求工资、加薪和职业保障，从来不问这种感情支配思想的生活之路将通向哪里。\n\n“你的意思是，当我幻想新棒球手套、糖果和玩具时，就像那头驴子和它面前的胡萝卜一样？”\n“不错。当你长大后，你想要的玩具会更贵，会变成要让你的朋友羡慕的汽车、游艇和大房子，”富爸爸笑着说，“恐惧把你推出门外，欲望又开始召唤你，诱惑你去触礁。这就是陷阱。”\n\n\n人生实际上是在无知和觉醒之间的一场斗争。\n他说一个人一旦停止了解有关自己的知识和信息，就会变得无知。这种斗争实际上就是你时刻都要做的一种决定：是通过不断学习打开自己的心扉，还是封闭自己的头脑\n学校培养了教师、医生、工程师、艺术家、厨师、商人、警察、消防员、士兵但不幸的是，对许多人来说，离开学校是学习的终点而不是起点。这些人才，所以我们的社会才能蒸蒸日上。\n\n\n永远不要忘记，你有两种感情——恐惧和欲望，如果你让它们来控制你的思想，你就会落入一生中最大的陷阱。一直生活在恐惧中，从不追求自己的梦想，这是残酷的。为钱拼命工作，以为钱能买来快乐，这也是残酷的。半夜醒来想着还有许多账单要付是一种可怕的生活方式，以工资的多少来决定过什么样的生活不是真正的生活。认为工作会给你带来安全感其实是在欺骗自己。\n\n\n\n成年后，我发觉向其他成年人解释什么是资产、什么是负债十分困难。为什么呢？\n因为成年人更聪明。大多数情况下，大多数的成年人没有掌握这个简单的道理，是因为他们已有了不同的教育背景。他们被其他受过高等教育的专家，比如银行家、会计师、房地产商、财务规划师等教过，于是就很难忘记已经学过的东西，变得像孩子一样简单。\n\n对资产的定义不是用词语而是用数字来表达的。如果你读不懂数字，就不知道什么是资产。关键不是数字，而是数字要告诉你的东西。\n\n\n\n财务知识是十分重要的，它包括对文字和数字两方面的理解。看不懂关于财务的文字或读不懂数字的含义，是产生财务问题的根本原因。\n\n\n\n更多的钱往往不能解决问题，实际上可能使问题变得更加严重。钱往往能暴露人性中那些可悲的弱点，并凸显人们的无知。\n钱只会让你头脑中的现金流的模式更加明显，如果你的模式是把收入都花掉，那么最可能的结果是在增加收入的同时也增加支出。\n\n大多数人不明白自己为什么会遭遇财务困境，这是因为他们不明白现金流。\n\n\n## 第三章 第二课 为什么要教授财务知识\n真正的问题在于他们选择的消费方式，那才是他们在财务困境中苦苦挣扎的原因\n大多数人并不真正懂得钱的意义，因此只能被钱控制，和钱对抗。\n钱的意义是什么？？？\n\n\n聪明人总是雇用比他更聪明的人\n\n财富增长：资产产生的收益高于负债产生的支出。\n\n## 第四章 第三课 关住自己的事业\n\n麦当劳：麦当劳的基本业务是出售麦当劳各个分店。他一向很重视每个分店的地理位置，因为他知道房产和位置将是每个分店获得成功的最重要的因素。实际上，是那些买下分店的人在为麦当劳买下的土地支付费用。\n麦当劳今天已经是世界上最大的独立房地产商了，它拥有的房地产甚至比天主教会还多。今天，麦当劳在美国以及世界其他地方都拥有一些位于街角和十字路口的黄金地段。\n\n大多数人工作其实是为其他人，而非他们自己。首先他们要为公司的老板工作，其次是通过纳税为政府工作，最后是为向他们提供住房按揭贷款的银行工作。\n\n<b>这就是致富的第三个秘诀：关注自己的事业</b>\n\n你的事业是什么？\n我经常问人们：“你的事业是什么？”他们会说：“我在银行工作。”接着我问他们是否拥有一家银行，他们通常回答：“不是的，我只在那儿工作。”。<b>他们混淆了他们的职业和事业，他们可以在银行工作，但他们仍应有自己的事业。</b>雷·克罗克他的职业总是不变的，他是个商人。他卖过牛奶搅拌器，后来又转卖汉堡包。但在他卖麦当劳分店的时候，他的事业是购买能产生收入的地产。\n\n学校的问题是你在那里学到什么，就会从事什么。从事你所学的专业的可怕后果在于，它会让你忘记关注自己的事业。人们耗尽一生去关注别人的事业并使他人致富。\n\n\n真正的资产可以分为以下几类：\n1．不需我到场就可以正常运作的业务。我拥有它们，但由别人经营和管理。如果我必须在那儿工作，那它就不是我的事业而是我的职业了；\n2．股票；\n3．债券；\n4．共同基金；\n5．能够产生收入的房地产；\n6．票据（借据）；\n7．版税，如音乐、手稿、专利；\n8．其他任何有价值、可产生收入或有增值潜力并且有很好销路的东西。\n\n富爸爸总是强调<b>财务知识</b>。我对<b>会计和现金管理</b>懂得越多，我就越能更好地进行投资分析并开始建立自己的公司。\n\n关注自己的事业时，我的意思是建立自己牢固的资产。一旦把1美元投入了资产项，就不要让它出来。这1美元进了你的资产项，它就成了你的雇员。关于钱，最妙的就是让它可以一天24小时不间断工作，还能为你的子孙后代服务。你要照常去工作，做个努力的雇员，但要不断构筑你的资产项。\n\n那些能给子孙留下遗产的人和那些能长期富有的人，就是先构筑资产项，然后才用资产所产生的收入购买奢侈品的，而穷人和中产阶级则用他们的血汗钱和本应该留给子孙的遗产来购买奢侈品。\n真正的奢侈品是对投资和积累真正资产的奖励。\n\n## 第五章 第四课 税收的历史和公司的力量\n税收的初衷是惩罚有钱人，而现实却是它惩罚了对它投赞同票的中产阶级和穷人。\n税之所以被接受是因为大众相信罗宾汉式的经济理论，即劫富济贫。问题是政府对钱的胃口越来越大，以致中产阶级也要被征税，且税收的范围不断向穷人扩展。\n\n\n有产者和无产者之间的斗争已有几百年了，它是想“劫富”的人与富人之间的斗争。\n<i>在任何时候、任何地方只要制定法律，就会发生这种斗争。(什么意思？？)</i>斗争会永远持续下去，吃亏的人一定是无知者，即那些每天起来勤奋工作去付税的人。但是如果他们了解富人玩的游戏，他们也会来玩，这样他们就可以实现财务自由。\n\n每当人们想惩罚富人时，富人不会坐以待毙，而是进行反击。他们有钱、有能力、有决心去改变处境。\n\n学习让钱为我工作而不是我为钱工作的第一课，关系到力量。如果你为钱工作，你就把力量给了你的老板；如果让钱为你工作，你就能控制这种力量。\n\n我们还需要了解法律系统是如何运作的。如果你对法律一无所知，就很容易被欺负；如果你了解法律，你就有还击的机会。富爸爸高薪雇用聪明的会计师和律师的原因——付给他们的钱要比付给政府的少得多。“精于计算你就不会被别人牵着走”。\n富爸爸了解法律，不仅因为他是一个守法的公民，还因为他知道不懂法律的代价有多么昂贵。\n\n财商（理财智商，Financial I. Q.）由4个方面的专门知识构成的：\n- 第一是会计，也就是我说的财务知识。你管理的钱越多，就越要精确，否则这幢大厦就会倒塌。这需要左脑来处理，是细节的部分。财务知识能帮助你读懂财务报表，还能让你辨别一项生意的优势和劣势。\n- 第二是投资，我把它称为钱生钱的科学。投资涉及策略和方案，这要右脑来做，是属于创造的部分。\n- 第三是了解市场，它是供给与需求的科学。这要求了解受感情驱动的市场的“技术面”。1996年圣诞节的搔痒娃娃大获成功就是一个受技术与感情影响的市场的最佳佐证。市场的另一个因素是“基本面”，或者说是一项投资的经济意义。一项投资究竟有无意义最终取决于当前的市场状况。搔痒娃娃是关于供求关系的一个很好的例子。同样的事也发生在股票、债券、房地产和棒球卡\n 市场上。\n- 第四是法律。例如：利用一个具有会计、投资和市场运营的企业会使你的财富实现爆炸性地增长。了解减税优惠政策和公司法的人会比雇员和小业主更快致富。\n    1. 减税优惠\n    2. 诉讼中获得保护\n\n## 第六章 第五课 富人的投资\n\n如果你把钱投进一笔交易然后只是祈祷，才是在赌博。在任何一项投资中，成功的办法都是运用你的技术知识、智慧以及对于这个游戏的热爱来减少意外、降低风险。\n风险总是存在的，但你的财商可以提高你应付意外的能力\n\n财商之外的三种技能：\n1. 如何寻找其他人忽视的机会\n2. 如何增加资金\n3. 怎样把精明的人组织起来  当你需要建议的时候，你一定要确定你选择的是明智的顾问。\n\n## 第七章 第六课 学会不为钱工作\n\n大部分人需要学习和掌握不止一项技能，只有这样他们的收入才能获得显著增长。\n工作是为了学习新东西\n\n# 第二部分 开端\n\n## 第八章 克服困难\n\n掌握财务知识的人有时候还是不能积累丰厚的资产项，其主要原因有5个：\n1．恐惧心理。 用资产进行投资却是一种高智商的游戏，需要胆量、耐心和对待失败的良好态度。。失败者回避失败，而失败本来是可以使失败者转变为成功者的。所以一定要“记住阿拉莫”。\n\n2．愤世嫉俗。愤世者抱怨现实，而成功者分析现实。抱怨蒙蔽人的头脑，而分析使人心明眼亮。分析能使成功者看到那些愤世者无法看到的东西，发现被其他人都忽视的机会。\n‘我不想要’是成功的关键。不想去修理厕所，我才想出购买更多的房地产并将自己从“老鼠赛跑”中尽快解脱出来的办法。那些一直说“我不想去修理厕所”的人总是拒绝使用这个强有力的投资工具，修厕所总是比他们的财务自由重要。\n\n3．懒惰。忙碌的人常常是最懒惰的人。\n那些过分忙于工作而不关心自己的财富的人。还有一些人过分地忙于工作而不照顾自己的身体。使这两种人如此忙碌的原因是一样的，他们把忙碌作为逃避问题的借口。没有人告诉他们这些，但他们心里其实很明白。事实上，如果你去提醒他们，他们往往还会很不高兴。如果他们不忙着工作或是与孩子在一起，就会忙着看电视、钓鱼、打高尔夫球和购物。总之，他们内心很清楚自己是在逃避一些很重要的事情。这是懒惰最普遍的表现形式，一种通过忙碌掩饰下的懒惰。\n“我可付不起”这句话禁锢了你的思想，使你无法进一步思考。“我怎样才能付得起”这句话则开启了你的头脑，迫使你去思考并寻求答案。\n每当你发现自己在逃避你内心清楚应该去做的事情时，就应该问问自己：“我还能得到什么？\n\n4．不良习惯。\n5．自负。傲慢是自大和无知的结合体。\n每当我自高自大时，我就认为我不知道的东西并不重要。\n如果你知道自己在某一问题上有所欠缺，你就应该找一位本领域的专家或是一本相关的书，马上开始教育自己。\n\n# 第三部分 开始行动\n## 第九章 开始行动\n1. 我需要一个超现实的理由——精神的力量。发自内心深处的精神动力。\n“不想要”促成“想要”的例子。我不想将一生都耗在工作上；我不想要父辈们渴望的那些东西，如稳定的工作和一套郊区的房子；我不想做一个打工仔；我讨厌我爸爸因为忙于工作而总是错过我的橄榄球比赛；我讨厌我爸爸终身努力工作，但在他去世时却失去了他几乎所有的东西，他甚至不能把自己辛苦一生的所得留给孩子。而富人不会那样做，他们会努力工作，然后将工作成果留给孩子们。\n其次是“想要”。我想自由自在地周游世界，我想以自己喜欢的方式生活，我想在年轻的时候就能做到这些，我想自由支配自己的时间和生活，我想要金钱为我工作。\n\n2. 每天作出自己的选择——选择的力量。\n思考这样两件事情：第一是时间，这是你最珍贵的资产；第二是学习，正因为你没有钱，就更要去学习。\n我们每天都应该作出一个选择，这个选择是我们利用自己的时间、金钱和头脑里学到的东西作出的。这就是选择的力量。我们都有机会。我选择成为富人，每天都在为此而努力。\n首先投资于教育。每个人都要选择要学习什么样的知识。你可以整天看音乐电视，也可以阅读高尔夫球杂志、上陶艺班或是理财规划培训班，你可以进行选择。\n3. 慎重选择朋友 -- 关系的力量\n我不会把理财状况作为挑选朋友的标准。我既有穷困潦倒的朋友，也有每年都有数百万美元进账的朋友，因为我相信“三人行，必有我师”，我愿意努力向他们学习。\n特意交一些有钱的朋友学习他们得以致富的知识。注意我有钱的朋友是如何谈论金钱的（我不是指他们的夸夸其谈）。另一些朋友经济上很困难，他们不爱谈论金钱、生意或投资，他们认为这既粗俗又不明智。但我也能从他们那里学到许多知识，我会知道什么东西不可以去做。\n\n广播节目通常会见到一帮所谓的“专家”。一位专家说市场正在走向衰退，另一位却声称市场正在趋于繁荣。如果你很精明，两方的话你都要听。保持一种开放的心态，因为两种说法都有合理的地方。\n\n在积累财富的过程中，最困难的事情莫过于坚持自己的选择而不盲目从众。因为在竞争激烈的市场上，群体往往会反应迟钝，成为被“宰割”的对象。如果一项大宗交易被列在投资杂志的首页，在多数情况下你此刻去投资恐怕为时已晚，这时你应该去寻找新的机会。\n就像冲浪者经常说的那样：“总会有新的浪头过来。”人们总是匆匆忙忙去赶那已经过去的浪头，往往又会被新的浪头淘汰出局。\n\n精明的投资者不会抱怨市场时机不对，如果错过了这个“浪头”，他们就会去寻找下一个，并且在其中找到自己的位置。\n\n你要去结交有钱的朋友，因为他们更加接近内部，而钱就是由“内线信息”挣来的。这样你就能在市场繁荣之前买进，在危机之前卖出。我不是要你去做非法的事，但是，你越早得到信息，获利的机会就越大，风险也会越小，这就是朋友的作用。这也是一种财商。\n4. 掌握一种模式，然后再学习一种新的模式——快速学习的力量。\n\n5. 首先支付自己——自律的力量。如果你控制不了自己，就别想着致富.\n\n能否自律是将富人、穷人和中产阶级区分开来的首要因素。\n\n生活之所以能推着你转，不是因为生活的力量很强大，而是因为你缺乏自律。\n\n\n开创事业所必备的最重要的3种管理技能是：\n1．现金流管理。\n2．人事管理。\n3．个人时间管理。\n这3项管理技能不仅适用于企业，而且还适用其他地方。比如，管理自己的日常生活、家庭、企业、慈善组织、城市甚至是国家。\n\n\n6. 给你的经纪人以优厚的报酬——好建议的力量。\n人事管理是重要的管理技能之一。许多人只会管理不如自己聪明的人或是能力不如自己的人，比如下属。许多中层管理人员一直停留在中层，就是因为他们只知道如何与职位低于自己的人一起工作，却不善于和比自己职位高的人一起工作。真正的技能是在某些技术领域能够管理比你更聪明的人并给他们提供优厚的报酬。这也是为什么公司要拥有一个董事会的原因，你应该有这种顾问，而这也是你的财商。\n7. 做一个“印第安给予者”——无私的力量。\n明智的投资者不只看到投资回报率，而且还能看到，一旦收回投资，就能额外得到的资产。这也是财商。\n我投资的项目都是在我能承担的损失范围之内的。我承认，在平均每10项投资中，我会有2～3项赢利，5～6项不赚不赔，2～3项亏本。但是我会将自己可能发生的损失限制在那个时期我所拥有的资金量的范围之内。\n8. 用资产来购买奢侈品——专注的力量。\n我习惯于用消费的欲望来激发并利用我的理财天赋去投资\n\n9. 对英雄的崇拜 -- 神话的力量\n\n10. 先予后取——给予的力量。\n一个人抱着柴火坐在寒冷的夜里，冲着一只大火炉叫道：“你什么时候给我温暖，我就什么时候给你添柴火。”\n\n在这个世界上有人比我们更聪明，你也许可以凭借自己的努力取得成功，但是如果有了这些人的帮助，你的成功之路也许就会更平坦。你应当做的就是：慷慨一些。反过来，那些人也会慷慨地对你。\n\n## 第十章 还想要更多吗？这里有一些要做的事\n\n大部分卖主的要价过高，很少有要价低于标的物的实际价值。\n\n多发出几份报价。没卖过东西的人，对想卖出东西的迫切心情是不会理解的。我有一处房产，想在数月之内卖掉，当时我愿意接受任何报价，不会在意价格有多低，即使他们只给我10头猪我也会非常高兴。报价本身并不重要，关键是有人感兴趣。也许我会反过来建议对方以一个猪圈交换房产也不一定呢，游戏就是这样的。记住，做买卖就是一场有趣的游戏。你提出报价之后，可能对方就会说：“成交。”\n\n寻找一桩好生意、一家好企业、一位合适的人、一位合适的投资者，或任何类似的东西，就如同约会一样。你必须到市场上去和许多人谈，做许多报价、还价、谈判、拒绝或者接受。我知道有些单身的人宁可在家里坐等电话铃响，但是，除非你是辛迪·克劳馥或者汤姆·克鲁斯，否则你<b>最好还是到市场上去</b>，即使只是一家超市也好。从寻找、报价、拒绝、谈判到成交，几乎是人的一生中要经历的全部过程。\n\n\n与人聊天获取信息的技巧，获取信息\n### 我首先寻找想买进的人，然后才去找想卖出的人\n1\n### 零售商喜欢提供数量折扣，就是因为大部分商人都喜欢大额购买的人。\n<b>即使你的投资规模很小，你也可以多考虑考虑大生意。</b>\n举例：当我的公司想购买电脑时，我就打电话给几位朋友，问他们是否也要买电脑。。接着我们到不同的零售商那里进行谈判，尽量压低价格，因为我们购买电脑的数量很大。\n小规模投资人善于小规模的动作，因为他们思考的范围太狭窄，他们总是单干，从不协同作战。\n\n\n### 学习前人经验。\n行动的人总会击败不行动的人。\n\n\n# 结束语　怎样用7000美元支付孩子的大学费用\n\n金钱是一种观念，如果你想要更多的钱，需要改变你的思想。\n金钱是一种观念，如果你想要更多的钱，只需改变你的思想。任何一个白手起家的人都是在某种思想的指导下，从小生意做起，然后不断做大。投资也是如此，起初只需投入一点钱，最后增长到很大数额。\n\n采取行动吧\n上天赐予我们每个人两样伟大的礼物：思想和时间。你可以运用这两件礼物去做你愿意做的事情。\n\n没有其他人比你更适合来开启你的孩子的财商。\n","source":"_posts/读书笔记/穷爸爸富爸爸.md","raw":"---\ntitle: 穷爸爸富爸爸\ndate: 2024-04-23 21:12:55\ntags:\n---\n# 序言 这就是你需要的\n# 第一部分 课程\n## 第一章 穷爸爸，富爸爸\n1. 贪财乃万恶之源，\n2. 贫穷才是万恶之本\n\n3. 思考问题，做出自己的选择而不是简单接受或否定\n\n3. 钱是一种力量，但更有力量的是财商教育。钱来了又会去，了解钱是如何运动的，获得驾驭它的力量。就能开始积累财富。\n\n## 第二章 第一课 富人不为钱工作\n多数人都希望有一份工资收入，因为他们都有恐惧和贪婪之心。一开始，没钱的恐惧会促使他们努力工作，得到报酬后，贪婪或欲望又让他们想拥有所有用钱能买到的好东西。于是就形成了一种模式。 起床，上班，付账，再起床，再上班，再付账…… 他们的生活从此被这两种感觉所控制：恐惧和贪婪。给他们更多的钱，他们就会以更高的开支重复这种循环。\n\n<b>弄清楚事情的真相</b>\n无需告诉别人你的感觉，只有你自己知道。\n害怕没有钱，更没有直面这种恐惧，对此他们虽然在情感上有所反应但并没有动脑筋想办法。\n他们手中有点小钱，可享乐、欲望和贪婪会立刻控制他们，他们会再次作出反应，仍然是不假思索。他们的感情代替了他们的思想。\n\n他们并不清楚自己真正的感觉，只是作出反应，而不去思考。他们感到恐惧，于是就去工作，希望钱能消除恐惧，但没有奏效。于是，恐惧追逐着他们，他们只好又去工作，再一次期望钱能平复这种恐惧，但还是没有成功。恐惧使他们落入工作的陷阱，挣钱——工作——挣钱，希望恐惧就此烟消云散。钱主宰着他们的生活，他们拒绝去分辨真相，钱控制了他们的情感和灵魂。\n\n奇怪大人们为什么总是急急忙忙去工作，而工作看起来并没什么乐趣可言，而且他们也不快活，但好像总有些东西逼着他们去工作。\n\n富爸爸说：“我希望你们能避开这个陷阱，这就是我真正想教你们的，而不只是发财，因为发财并不能解决问题。”\n\n\n欲望。有人把它称为贪婪，但我更喜欢用欲望这个词。\n希望拥有一些更好、更漂亮、更有趣或更令人激动的东西，这是相当正常的。\n人们也为了实现欲望而工作。认为钱能买来快乐，可用钱买来的快乐往往是短暂的，所以不久就需要更多的钱来买更多的快乐、更多的开心、更多的舒适和更多的安全感。于是他们继续工作，以为钱能安抚他们备受恐惧和欲望折磨的灵魂，但实际上钱是无法做到这一点的。\n\n许多人致富并非出于欲望而是由于恐惧，他们认为钱能消除贫困带来的恐惧，所以他们积攒了很多的钱，却发现恐惧感更加强烈了。害怕失去钱。一些朋友，已经很有钱了，但还在拼命工作。我还认识一些百万富翁，他们现在甚至比他们穷困时还要恐惧，他们害怕失去所有的钱。他们越富有，这种感觉就越强烈。他们灵魂中软弱贫乏的一面总是在大声尖叫，他们不想失去大房子、车子和钱带给他们的上等生活。他们甚至担心一旦没钱了，朋友们会看不起他们。许多人变得绝望而神经质，尽管他们很富有。\n\n那穷人是不是要快活一点？可不这么认为,不谈钱就像依赖钱一样是一种精神上的疾病。\"我对钱不感兴趣。我工作是因为我热爱这个职业。\"不要用这句话来掩藏他内心真实的感受。\n\n\n我们该怎么办呢？不为钱工作直到不再有恐惧和贪婪吗？不，那只会浪费时间。正是因为有感情，我们才成为人。<i>感情使我们更加真实，它是我们行动的动力。忠实于你的感情，以你喜欢的方式运用你的头脑和感情，不要让它们控制你。</i>\n\n\"去上学，取得好成绩，这样你就能找到一份安稳的工作\"。大多数人都这么给别人建议，而且对于大多数人来说这也确实是个好主意。但人们仍是基于恐惧才给出这样的建议的。\n他担心你将来挣不到钱，在这个社会上过得不好。别误解我的话，他爱你而且希望你能够一帆风顺。我认为他的担心不无道理。教育和工作是很重要的，可它们对付不了恐惧。实际上，促使他每天去上班挣钱的恐惧也使得他热衷于让你去上学。\n\n<b>学会支配钱</b>而不是害怕它，这是在学校里学不到的。如果不学，你就会变成金钱的奴隶。\n\n我们在根本上都是雇员，只是层次不同而已.避开由恐惧和欲望组成的陷阱，按照你们喜欢的方式利用恐惧和欲望，而不要让它们控制你们。如果你们不先控制恐惧和欲望，即使你们获得高薪，也只不过是金钱的奴隶而已。\n\n造成贫困和财务问题的主要原因是恐惧和无知，而不是经济环境、政府或者富人。\n人们自身的恐惧和无知使他们困在陷阱里，所以你们应该去上学、接受高等教育。让我来叫你们如何处理金钱和恐惧，怎样不落入陷阱。\n\n在我用更高的工资诱惑你们时，你们感觉怎样？非常想要吗？你们没有屈服于自己的感觉，你们没有立刻作出决定。这一点最重要。我们总是会有恐惧、贪婪的时候。运用感情作长远打算，别让感情控制了思想。大多数人让恐惧和贪婪来支配自己，这是无知的开始。因为恐惧和贪婪，大多数人一生都在追求工资、加薪和职业保障，从来不问这种感情支配思想的生活之路将通向哪里。\n\n“你的意思是，当我幻想新棒球手套、糖果和玩具时，就像那头驴子和它面前的胡萝卜一样？”\n“不错。当你长大后，你想要的玩具会更贵，会变成要让你的朋友羡慕的汽车、游艇和大房子，”富爸爸笑着说，“恐惧把你推出门外，欲望又开始召唤你，诱惑你去触礁。这就是陷阱。”\n\n\n人生实际上是在无知和觉醒之间的一场斗争。\n他说一个人一旦停止了解有关自己的知识和信息，就会变得无知。这种斗争实际上就是你时刻都要做的一种决定：是通过不断学习打开自己的心扉，还是封闭自己的头脑\n学校培养了教师、医生、工程师、艺术家、厨师、商人、警察、消防员、士兵但不幸的是，对许多人来说，离开学校是学习的终点而不是起点。这些人才，所以我们的社会才能蒸蒸日上。\n\n\n永远不要忘记，你有两种感情——恐惧和欲望，如果你让它们来控制你的思想，你就会落入一生中最大的陷阱。一直生活在恐惧中，从不追求自己的梦想，这是残酷的。为钱拼命工作，以为钱能买来快乐，这也是残酷的。半夜醒来想着还有许多账单要付是一种可怕的生活方式，以工资的多少来决定过什么样的生活不是真正的生活。认为工作会给你带来安全感其实是在欺骗自己。\n\n\n\n成年后，我发觉向其他成年人解释什么是资产、什么是负债十分困难。为什么呢？\n因为成年人更聪明。大多数情况下，大多数的成年人没有掌握这个简单的道理，是因为他们已有了不同的教育背景。他们被其他受过高等教育的专家，比如银行家、会计师、房地产商、财务规划师等教过，于是就很难忘记已经学过的东西，变得像孩子一样简单。\n\n对资产的定义不是用词语而是用数字来表达的。如果你读不懂数字，就不知道什么是资产。关键不是数字，而是数字要告诉你的东西。\n\n\n\n财务知识是十分重要的，它包括对文字和数字两方面的理解。看不懂关于财务的文字或读不懂数字的含义，是产生财务问题的根本原因。\n\n\n\n更多的钱往往不能解决问题，实际上可能使问题变得更加严重。钱往往能暴露人性中那些可悲的弱点，并凸显人们的无知。\n钱只会让你头脑中的现金流的模式更加明显，如果你的模式是把收入都花掉，那么最可能的结果是在增加收入的同时也增加支出。\n\n大多数人不明白自己为什么会遭遇财务困境，这是因为他们不明白现金流。\n\n\n## 第三章 第二课 为什么要教授财务知识\n真正的问题在于他们选择的消费方式，那才是他们在财务困境中苦苦挣扎的原因\n大多数人并不真正懂得钱的意义，因此只能被钱控制，和钱对抗。\n钱的意义是什么？？？\n\n\n聪明人总是雇用比他更聪明的人\n\n财富增长：资产产生的收益高于负债产生的支出。\n\n## 第四章 第三课 关住自己的事业\n\n麦当劳：麦当劳的基本业务是出售麦当劳各个分店。他一向很重视每个分店的地理位置，因为他知道房产和位置将是每个分店获得成功的最重要的因素。实际上，是那些买下分店的人在为麦当劳买下的土地支付费用。\n麦当劳今天已经是世界上最大的独立房地产商了，它拥有的房地产甚至比天主教会还多。今天，麦当劳在美国以及世界其他地方都拥有一些位于街角和十字路口的黄金地段。\n\n大多数人工作其实是为其他人，而非他们自己。首先他们要为公司的老板工作，其次是通过纳税为政府工作，最后是为向他们提供住房按揭贷款的银行工作。\n\n<b>这就是致富的第三个秘诀：关注自己的事业</b>\n\n你的事业是什么？\n我经常问人们：“你的事业是什么？”他们会说：“我在银行工作。”接着我问他们是否拥有一家银行，他们通常回答：“不是的，我只在那儿工作。”。<b>他们混淆了他们的职业和事业，他们可以在银行工作，但他们仍应有自己的事业。</b>雷·克罗克他的职业总是不变的，他是个商人。他卖过牛奶搅拌器，后来又转卖汉堡包。但在他卖麦当劳分店的时候，他的事业是购买能产生收入的地产。\n\n学校的问题是你在那里学到什么，就会从事什么。从事你所学的专业的可怕后果在于，它会让你忘记关注自己的事业。人们耗尽一生去关注别人的事业并使他人致富。\n\n\n真正的资产可以分为以下几类：\n1．不需我到场就可以正常运作的业务。我拥有它们，但由别人经营和管理。如果我必须在那儿工作，那它就不是我的事业而是我的职业了；\n2．股票；\n3．债券；\n4．共同基金；\n5．能够产生收入的房地产；\n6．票据（借据）；\n7．版税，如音乐、手稿、专利；\n8．其他任何有价值、可产生收入或有增值潜力并且有很好销路的东西。\n\n富爸爸总是强调<b>财务知识</b>。我对<b>会计和现金管理</b>懂得越多，我就越能更好地进行投资分析并开始建立自己的公司。\n\n关注自己的事业时，我的意思是建立自己牢固的资产。一旦把1美元投入了资产项，就不要让它出来。这1美元进了你的资产项，它就成了你的雇员。关于钱，最妙的就是让它可以一天24小时不间断工作，还能为你的子孙后代服务。你要照常去工作，做个努力的雇员，但要不断构筑你的资产项。\n\n那些能给子孙留下遗产的人和那些能长期富有的人，就是先构筑资产项，然后才用资产所产生的收入购买奢侈品的，而穷人和中产阶级则用他们的血汗钱和本应该留给子孙的遗产来购买奢侈品。\n真正的奢侈品是对投资和积累真正资产的奖励。\n\n## 第五章 第四课 税收的历史和公司的力量\n税收的初衷是惩罚有钱人，而现实却是它惩罚了对它投赞同票的中产阶级和穷人。\n税之所以被接受是因为大众相信罗宾汉式的经济理论，即劫富济贫。问题是政府对钱的胃口越来越大，以致中产阶级也要被征税，且税收的范围不断向穷人扩展。\n\n\n有产者和无产者之间的斗争已有几百年了，它是想“劫富”的人与富人之间的斗争。\n<i>在任何时候、任何地方只要制定法律，就会发生这种斗争。(什么意思？？)</i>斗争会永远持续下去，吃亏的人一定是无知者，即那些每天起来勤奋工作去付税的人。但是如果他们了解富人玩的游戏，他们也会来玩，这样他们就可以实现财务自由。\n\n每当人们想惩罚富人时，富人不会坐以待毙，而是进行反击。他们有钱、有能力、有决心去改变处境。\n\n学习让钱为我工作而不是我为钱工作的第一课，关系到力量。如果你为钱工作，你就把力量给了你的老板；如果让钱为你工作，你就能控制这种力量。\n\n我们还需要了解法律系统是如何运作的。如果你对法律一无所知，就很容易被欺负；如果你了解法律，你就有还击的机会。富爸爸高薪雇用聪明的会计师和律师的原因——付给他们的钱要比付给政府的少得多。“精于计算你就不会被别人牵着走”。\n富爸爸了解法律，不仅因为他是一个守法的公民，还因为他知道不懂法律的代价有多么昂贵。\n\n财商（理财智商，Financial I. Q.）由4个方面的专门知识构成的：\n- 第一是会计，也就是我说的财务知识。你管理的钱越多，就越要精确，否则这幢大厦就会倒塌。这需要左脑来处理，是细节的部分。财务知识能帮助你读懂财务报表，还能让你辨别一项生意的优势和劣势。\n- 第二是投资，我把它称为钱生钱的科学。投资涉及策略和方案，这要右脑来做，是属于创造的部分。\n- 第三是了解市场，它是供给与需求的科学。这要求了解受感情驱动的市场的“技术面”。1996年圣诞节的搔痒娃娃大获成功就是一个受技术与感情影响的市场的最佳佐证。市场的另一个因素是“基本面”，或者说是一项投资的经济意义。一项投资究竟有无意义最终取决于当前的市场状况。搔痒娃娃是关于供求关系的一个很好的例子。同样的事也发生在股票、债券、房地产和棒球卡\n 市场上。\n- 第四是法律。例如：利用一个具有会计、投资和市场运营的企业会使你的财富实现爆炸性地增长。了解减税优惠政策和公司法的人会比雇员和小业主更快致富。\n    1. 减税优惠\n    2. 诉讼中获得保护\n\n## 第六章 第五课 富人的投资\n\n如果你把钱投进一笔交易然后只是祈祷，才是在赌博。在任何一项投资中，成功的办法都是运用你的技术知识、智慧以及对于这个游戏的热爱来减少意外、降低风险。\n风险总是存在的，但你的财商可以提高你应付意外的能力\n\n财商之外的三种技能：\n1. 如何寻找其他人忽视的机会\n2. 如何增加资金\n3. 怎样把精明的人组织起来  当你需要建议的时候，你一定要确定你选择的是明智的顾问。\n\n## 第七章 第六课 学会不为钱工作\n\n大部分人需要学习和掌握不止一项技能，只有这样他们的收入才能获得显著增长。\n工作是为了学习新东西\n\n# 第二部分 开端\n\n## 第八章 克服困难\n\n掌握财务知识的人有时候还是不能积累丰厚的资产项，其主要原因有5个：\n1．恐惧心理。 用资产进行投资却是一种高智商的游戏，需要胆量、耐心和对待失败的良好态度。。失败者回避失败，而失败本来是可以使失败者转变为成功者的。所以一定要“记住阿拉莫”。\n\n2．愤世嫉俗。愤世者抱怨现实，而成功者分析现实。抱怨蒙蔽人的头脑，而分析使人心明眼亮。分析能使成功者看到那些愤世者无法看到的东西，发现被其他人都忽视的机会。\n‘我不想要’是成功的关键。不想去修理厕所，我才想出购买更多的房地产并将自己从“老鼠赛跑”中尽快解脱出来的办法。那些一直说“我不想去修理厕所”的人总是拒绝使用这个强有力的投资工具，修厕所总是比他们的财务自由重要。\n\n3．懒惰。忙碌的人常常是最懒惰的人。\n那些过分忙于工作而不关心自己的财富的人。还有一些人过分地忙于工作而不照顾自己的身体。使这两种人如此忙碌的原因是一样的，他们把忙碌作为逃避问题的借口。没有人告诉他们这些，但他们心里其实很明白。事实上，如果你去提醒他们，他们往往还会很不高兴。如果他们不忙着工作或是与孩子在一起，就会忙着看电视、钓鱼、打高尔夫球和购物。总之，他们内心很清楚自己是在逃避一些很重要的事情。这是懒惰最普遍的表现形式，一种通过忙碌掩饰下的懒惰。\n“我可付不起”这句话禁锢了你的思想，使你无法进一步思考。“我怎样才能付得起”这句话则开启了你的头脑，迫使你去思考并寻求答案。\n每当你发现自己在逃避你内心清楚应该去做的事情时，就应该问问自己：“我还能得到什么？\n\n4．不良习惯。\n5．自负。傲慢是自大和无知的结合体。\n每当我自高自大时，我就认为我不知道的东西并不重要。\n如果你知道自己在某一问题上有所欠缺，你就应该找一位本领域的专家或是一本相关的书，马上开始教育自己。\n\n# 第三部分 开始行动\n## 第九章 开始行动\n1. 我需要一个超现实的理由——精神的力量。发自内心深处的精神动力。\n“不想要”促成“想要”的例子。我不想将一生都耗在工作上；我不想要父辈们渴望的那些东西，如稳定的工作和一套郊区的房子；我不想做一个打工仔；我讨厌我爸爸因为忙于工作而总是错过我的橄榄球比赛；我讨厌我爸爸终身努力工作，但在他去世时却失去了他几乎所有的东西，他甚至不能把自己辛苦一生的所得留给孩子。而富人不会那样做，他们会努力工作，然后将工作成果留给孩子们。\n其次是“想要”。我想自由自在地周游世界，我想以自己喜欢的方式生活，我想在年轻的时候就能做到这些，我想自由支配自己的时间和生活，我想要金钱为我工作。\n\n2. 每天作出自己的选择——选择的力量。\n思考这样两件事情：第一是时间，这是你最珍贵的资产；第二是学习，正因为你没有钱，就更要去学习。\n我们每天都应该作出一个选择，这个选择是我们利用自己的时间、金钱和头脑里学到的东西作出的。这就是选择的力量。我们都有机会。我选择成为富人，每天都在为此而努力。\n首先投资于教育。每个人都要选择要学习什么样的知识。你可以整天看音乐电视，也可以阅读高尔夫球杂志、上陶艺班或是理财规划培训班，你可以进行选择。\n3. 慎重选择朋友 -- 关系的力量\n我不会把理财状况作为挑选朋友的标准。我既有穷困潦倒的朋友，也有每年都有数百万美元进账的朋友，因为我相信“三人行，必有我师”，我愿意努力向他们学习。\n特意交一些有钱的朋友学习他们得以致富的知识。注意我有钱的朋友是如何谈论金钱的（我不是指他们的夸夸其谈）。另一些朋友经济上很困难，他们不爱谈论金钱、生意或投资，他们认为这既粗俗又不明智。但我也能从他们那里学到许多知识，我会知道什么东西不可以去做。\n\n广播节目通常会见到一帮所谓的“专家”。一位专家说市场正在走向衰退，另一位却声称市场正在趋于繁荣。如果你很精明，两方的话你都要听。保持一种开放的心态，因为两种说法都有合理的地方。\n\n在积累财富的过程中，最困难的事情莫过于坚持自己的选择而不盲目从众。因为在竞争激烈的市场上，群体往往会反应迟钝，成为被“宰割”的对象。如果一项大宗交易被列在投资杂志的首页，在多数情况下你此刻去投资恐怕为时已晚，这时你应该去寻找新的机会。\n就像冲浪者经常说的那样：“总会有新的浪头过来。”人们总是匆匆忙忙去赶那已经过去的浪头，往往又会被新的浪头淘汰出局。\n\n精明的投资者不会抱怨市场时机不对，如果错过了这个“浪头”，他们就会去寻找下一个，并且在其中找到自己的位置。\n\n你要去结交有钱的朋友，因为他们更加接近内部，而钱就是由“内线信息”挣来的。这样你就能在市场繁荣之前买进，在危机之前卖出。我不是要你去做非法的事，但是，你越早得到信息，获利的机会就越大，风险也会越小，这就是朋友的作用。这也是一种财商。\n4. 掌握一种模式，然后再学习一种新的模式——快速学习的力量。\n\n5. 首先支付自己——自律的力量。如果你控制不了自己，就别想着致富.\n\n能否自律是将富人、穷人和中产阶级区分开来的首要因素。\n\n生活之所以能推着你转，不是因为生活的力量很强大，而是因为你缺乏自律。\n\n\n开创事业所必备的最重要的3种管理技能是：\n1．现金流管理。\n2．人事管理。\n3．个人时间管理。\n这3项管理技能不仅适用于企业，而且还适用其他地方。比如，管理自己的日常生活、家庭、企业、慈善组织、城市甚至是国家。\n\n\n6. 给你的经纪人以优厚的报酬——好建议的力量。\n人事管理是重要的管理技能之一。许多人只会管理不如自己聪明的人或是能力不如自己的人，比如下属。许多中层管理人员一直停留在中层，就是因为他们只知道如何与职位低于自己的人一起工作，却不善于和比自己职位高的人一起工作。真正的技能是在某些技术领域能够管理比你更聪明的人并给他们提供优厚的报酬。这也是为什么公司要拥有一个董事会的原因，你应该有这种顾问，而这也是你的财商。\n7. 做一个“印第安给予者”——无私的力量。\n明智的投资者不只看到投资回报率，而且还能看到，一旦收回投资，就能额外得到的资产。这也是财商。\n我投资的项目都是在我能承担的损失范围之内的。我承认，在平均每10项投资中，我会有2～3项赢利，5～6项不赚不赔，2～3项亏本。但是我会将自己可能发生的损失限制在那个时期我所拥有的资金量的范围之内。\n8. 用资产来购买奢侈品——专注的力量。\n我习惯于用消费的欲望来激发并利用我的理财天赋去投资\n\n9. 对英雄的崇拜 -- 神话的力量\n\n10. 先予后取——给予的力量。\n一个人抱着柴火坐在寒冷的夜里，冲着一只大火炉叫道：“你什么时候给我温暖，我就什么时候给你添柴火。”\n\n在这个世界上有人比我们更聪明，你也许可以凭借自己的努力取得成功，但是如果有了这些人的帮助，你的成功之路也许就会更平坦。你应当做的就是：慷慨一些。反过来，那些人也会慷慨地对你。\n\n## 第十章 还想要更多吗？这里有一些要做的事\n\n大部分卖主的要价过高，很少有要价低于标的物的实际价值。\n\n多发出几份报价。没卖过东西的人，对想卖出东西的迫切心情是不会理解的。我有一处房产，想在数月之内卖掉，当时我愿意接受任何报价，不会在意价格有多低，即使他们只给我10头猪我也会非常高兴。报价本身并不重要，关键是有人感兴趣。也许我会反过来建议对方以一个猪圈交换房产也不一定呢，游戏就是这样的。记住，做买卖就是一场有趣的游戏。你提出报价之后，可能对方就会说：“成交。”\n\n寻找一桩好生意、一家好企业、一位合适的人、一位合适的投资者，或任何类似的东西，就如同约会一样。你必须到市场上去和许多人谈，做许多报价、还价、谈判、拒绝或者接受。我知道有些单身的人宁可在家里坐等电话铃响，但是，除非你是辛迪·克劳馥或者汤姆·克鲁斯，否则你<b>最好还是到市场上去</b>，即使只是一家超市也好。从寻找、报价、拒绝、谈判到成交，几乎是人的一生中要经历的全部过程。\n\n\n与人聊天获取信息的技巧，获取信息\n### 我首先寻找想买进的人，然后才去找想卖出的人\n1\n### 零售商喜欢提供数量折扣，就是因为大部分商人都喜欢大额购买的人。\n<b>即使你的投资规模很小，你也可以多考虑考虑大生意。</b>\n举例：当我的公司想购买电脑时，我就打电话给几位朋友，问他们是否也要买电脑。。接着我们到不同的零售商那里进行谈判，尽量压低价格，因为我们购买电脑的数量很大。\n小规模投资人善于小规模的动作，因为他们思考的范围太狭窄，他们总是单干，从不协同作战。\n\n\n### 学习前人经验。\n行动的人总会击败不行动的人。\n\n\n# 结束语　怎样用7000美元支付孩子的大学费用\n\n金钱是一种观念，如果你想要更多的钱，需要改变你的思想。\n金钱是一种观念，如果你想要更多的钱，只需改变你的思想。任何一个白手起家的人都是在某种思想的指导下，从小生意做起，然后不断做大。投资也是如此，起初只需投入一点钱，最后增长到很大数额。\n\n采取行动吧\n上天赐予我们每个人两样伟大的礼物：思想和时间。你可以运用这两件礼物去做你愿意做的事情。\n\n没有其他人比你更适合来开启你的孩子的财商。\n","slug":"读书笔记/穷爸爸富爸爸","published":1,"updated":"2024-04-25T14:09:55.087Z","_id":"clvd2z0un00006cv084fg8hig","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"序言-这就是你需要的\"><a href=\"#序言-这就是你需要的\" class=\"headerlink\" title=\"序言 这就是你需要的\"></a>序言 这就是你需要的</h1><h1 id=\"第一部分-课程\"><a href=\"#第一部分-课程\" class=\"headerlink\" title=\"第一部分 课程\"></a>第一部分 课程</h1><h2 id=\"第一章-穷爸爸，富爸爸\"><a href=\"#第一章-穷爸爸，富爸爸\" class=\"headerlink\" title=\"第一章 穷爸爸，富爸爸\"></a>第一章 穷爸爸，富爸爸</h2><ol>\n<li><p>贪财乃万恶之源，</p>\n</li>\n<li><p>贫穷才是万恶之本</p>\n</li>\n<li><p>思考问题，做出自己的选择而不是简单接受或否定</p>\n</li>\n<li><p>钱是一种力量，但更有力量的是财商教育。钱来了又会去，了解钱是如何运动的，获得驾驭它的力量。就能开始积累财富。</p>\n</li>\n</ol>\n<h2 id=\"第二章-第一课-富人不为钱工作\"><a href=\"#第二章-第一课-富人不为钱工作\" class=\"headerlink\" title=\"第二章 第一课 富人不为钱工作\"></a>第二章 第一课 富人不为钱工作</h2><p>多数人都希望有一份工资收入，因为他们都有恐惧和贪婪之心。一开始，没钱的恐惧会促使他们努力工作，得到报酬后，贪婪或欲望又让他们想拥有所有用钱能买到的好东西。于是就形成了一种模式。 起床，上班，付账，再起床，再上班，再付账…… 他们的生活从此被这两种感觉所控制：恐惧和贪婪。给他们更多的钱，他们就会以更高的开支重复这种循环。</p>\n<p><b>弄清楚事情的真相</b><br>无需告诉别人你的感觉，只有你自己知道。<br>害怕没有钱，更没有直面这种恐惧，对此他们虽然在情感上有所反应但并没有动脑筋想办法。<br>他们手中有点小钱，可享乐、欲望和贪婪会立刻控制他们，他们会再次作出反应，仍然是不假思索。他们的感情代替了他们的思想。</p>\n<p>他们并不清楚自己真正的感觉，只是作出反应，而不去思考。他们感到恐惧，于是就去工作，希望钱能消除恐惧，但没有奏效。于是，恐惧追逐着他们，他们只好又去工作，再一次期望钱能平复这种恐惧，但还是没有成功。恐惧使他们落入工作的陷阱，挣钱——工作——挣钱，希望恐惧就此烟消云散。钱主宰着他们的生活，他们拒绝去分辨真相，钱控制了他们的情感和灵魂。</p>\n<p>奇怪大人们为什么总是急急忙忙去工作，而工作看起来并没什么乐趣可言，而且他们也不快活，但好像总有些东西逼着他们去工作。</p>\n<p>富爸爸说：“我希望你们能避开这个陷阱，这就是我真正想教你们的，而不只是发财，因为发财并不能解决问题。”</p>\n<p>欲望。有人把它称为贪婪，但我更喜欢用欲望这个词。<br>希望拥有一些更好、更漂亮、更有趣或更令人激动的东西，这是相当正常的。<br>人们也为了实现欲望而工作。认为钱能买来快乐，可用钱买来的快乐往往是短暂的，所以不久就需要更多的钱来买更多的快乐、更多的开心、更多的舒适和更多的安全感。于是他们继续工作，以为钱能安抚他们备受恐惧和欲望折磨的灵魂，但实际上钱是无法做到这一点的。</p>\n<p>许多人致富并非出于欲望而是由于恐惧，他们认为钱能消除贫困带来的恐惧，所以他们积攒了很多的钱，却发现恐惧感更加强烈了。害怕失去钱。一些朋友，已经很有钱了，但还在拼命工作。我还认识一些百万富翁，他们现在甚至比他们穷困时还要恐惧，他们害怕失去所有的钱。他们越富有，这种感觉就越强烈。他们灵魂中软弱贫乏的一面总是在大声尖叫，他们不想失去大房子、车子和钱带给他们的上等生活。他们甚至担心一旦没钱了，朋友们会看不起他们。许多人变得绝望而神经质，尽管他们很富有。</p>\n<p>那穷人是不是要快活一点？可不这么认为,不谈钱就像依赖钱一样是一种精神上的疾病。”我对钱不感兴趣。我工作是因为我热爱这个职业。”不要用这句话来掩藏他内心真实的感受。</p>\n<p>我们该怎么办呢？不为钱工作直到不再有恐惧和贪婪吗？不，那只会浪费时间。正是因为有感情，我们才成为人。<i>感情使我们更加真实，它是我们行动的动力。忠实于你的感情，以你喜欢的方式运用你的头脑和感情，不要让它们控制你。</i></p>\n<p>“去上学，取得好成绩，这样你就能找到一份安稳的工作”。大多数人都这么给别人建议，而且对于大多数人来说这也确实是个好主意。但人们仍是基于恐惧才给出这样的建议的。<br>他担心你将来挣不到钱，在这个社会上过得不好。别误解我的话，他爱你而且希望你能够一帆风顺。我认为他的担心不无道理。教育和工作是很重要的，可它们对付不了恐惧。实际上，促使他每天去上班挣钱的恐惧也使得他热衷于让你去上学。</p>\n<p><b>学会支配钱</b>而不是害怕它，这是在学校里学不到的。如果不学，你就会变成金钱的奴隶。</p>\n<p>我们在根本上都是雇员，只是层次不同而已.避开由恐惧和欲望组成的陷阱，按照你们喜欢的方式利用恐惧和欲望，而不要让它们控制你们。如果你们不先控制恐惧和欲望，即使你们获得高薪，也只不过是金钱的奴隶而已。</p>\n<p>造成贫困和财务问题的主要原因是恐惧和无知，而不是经济环境、政府或者富人。<br>人们自身的恐惧和无知使他们困在陷阱里，所以你们应该去上学、接受高等教育。让我来叫你们如何处理金钱和恐惧，怎样不落入陷阱。</p>\n<p>在我用更高的工资诱惑你们时，你们感觉怎样？非常想要吗？你们没有屈服于自己的感觉，你们没有立刻作出决定。这一点最重要。我们总是会有恐惧、贪婪的时候。运用感情作长远打算，别让感情控制了思想。大多数人让恐惧和贪婪来支配自己，这是无知的开始。因为恐惧和贪婪，大多数人一生都在追求工资、加薪和职业保障，从来不问这种感情支配思想的生活之路将通向哪里。</p>\n<p>“你的意思是，当我幻想新棒球手套、糖果和玩具时，就像那头驴子和它面前的胡萝卜一样？”<br>“不错。当你长大后，你想要的玩具会更贵，会变成要让你的朋友羡慕的汽车、游艇和大房子，”富爸爸笑着说，“恐惧把你推出门外，欲望又开始召唤你，诱惑你去触礁。这就是陷阱。”</p>\n<p>人生实际上是在无知和觉醒之间的一场斗争。<br>他说一个人一旦停止了解有关自己的知识和信息，就会变得无知。这种斗争实际上就是你时刻都要做的一种决定：是通过不断学习打开自己的心扉，还是封闭自己的头脑<br>学校培养了教师、医生、工程师、艺术家、厨师、商人、警察、消防员、士兵但不幸的是，对许多人来说，离开学校是学习的终点而不是起点。这些人才，所以我们的社会才能蒸蒸日上。</p>\n<p>永远不要忘记，你有两种感情——恐惧和欲望，如果你让它们来控制你的思想，你就会落入一生中最大的陷阱。一直生活在恐惧中，从不追求自己的梦想，这是残酷的。为钱拼命工作，以为钱能买来快乐，这也是残酷的。半夜醒来想着还有许多账单要付是一种可怕的生活方式，以工资的多少来决定过什么样的生活不是真正的生活。认为工作会给你带来安全感其实是在欺骗自己。</p>\n<p>成年后，我发觉向其他成年人解释什么是资产、什么是负债十分困难。为什么呢？<br>因为成年人更聪明。大多数情况下，大多数的成年人没有掌握这个简单的道理，是因为他们已有了不同的教育背景。他们被其他受过高等教育的专家，比如银行家、会计师、房地产商、财务规划师等教过，于是就很难忘记已经学过的东西，变得像孩子一样简单。</p>\n<p>对资产的定义不是用词语而是用数字来表达的。如果你读不懂数字，就不知道什么是资产。关键不是数字，而是数字要告诉你的东西。</p>\n<p>财务知识是十分重要的，它包括对文字和数字两方面的理解。看不懂关于财务的文字或读不懂数字的含义，是产生财务问题的根本原因。</p>\n<p>更多的钱往往不能解决问题，实际上可能使问题变得更加严重。钱往往能暴露人性中那些可悲的弱点，并凸显人们的无知。<br>钱只会让你头脑中的现金流的模式更加明显，如果你的模式是把收入都花掉，那么最可能的结果是在增加收入的同时也增加支出。</p>\n<p>大多数人不明白自己为什么会遭遇财务困境，这是因为他们不明白现金流。</p>\n<h2 id=\"第三章-第二课-为什么要教授财务知识\"><a href=\"#第三章-第二课-为什么要教授财务知识\" class=\"headerlink\" title=\"第三章 第二课 为什么要教授财务知识\"></a>第三章 第二课 为什么要教授财务知识</h2><p>真正的问题在于他们选择的消费方式，那才是他们在财务困境中苦苦挣扎的原因<br>大多数人并不真正懂得钱的意义，因此只能被钱控制，和钱对抗。<br>钱的意义是什么？？？</p>\n<p>聪明人总是雇用比他更聪明的人</p>\n<p>财富增长：资产产生的收益高于负债产生的支出。</p>\n<h2 id=\"第四章-第三课-关住自己的事业\"><a href=\"#第四章-第三课-关住自己的事业\" class=\"headerlink\" title=\"第四章 第三课 关住自己的事业\"></a>第四章 第三课 关住自己的事业</h2><p>麦当劳：麦当劳的基本业务是出售麦当劳各个分店。他一向很重视每个分店的地理位置，因为他知道房产和位置将是每个分店获得成功的最重要的因素。实际上，是那些买下分店的人在为麦当劳买下的土地支付费用。<br>麦当劳今天已经是世界上最大的独立房地产商了，它拥有的房地产甚至比天主教会还多。今天，麦当劳在美国以及世界其他地方都拥有一些位于街角和十字路口的黄金地段。</p>\n<p>大多数人工作其实是为其他人，而非他们自己。首先他们要为公司的老板工作，其次是通过纳税为政府工作，最后是为向他们提供住房按揭贷款的银行工作。</p>\n<p><b>这就是致富的第三个秘诀：关注自己的事业</b></p>\n<p>你的事业是什么？<br>我经常问人们：“你的事业是什么？”他们会说：“我在银行工作。”接着我问他们是否拥有一家银行，他们通常回答：“不是的，我只在那儿工作。”。<b>他们混淆了他们的职业和事业，他们可以在银行工作，但他们仍应有自己的事业。</b>雷·克罗克他的职业总是不变的，他是个商人。他卖过牛奶搅拌器，后来又转卖汉堡包。但在他卖麦当劳分店的时候，他的事业是购买能产生收入的地产。</p>\n<p>学校的问题是你在那里学到什么，就会从事什么。从事你所学的专业的可怕后果在于，它会让你忘记关注自己的事业。人们耗尽一生去关注别人的事业并使他人致富。</p>\n<p>真正的资产可以分为以下几类：<br>1．不需我到场就可以正常运作的业务。我拥有它们，但由别人经营和管理。如果我必须在那儿工作，那它就不是我的事业而是我的职业了；<br>2．股票；<br>3．债券；<br>4．共同基金；<br>5．能够产生收入的房地产；<br>6．票据（借据）；<br>7．版税，如音乐、手稿、专利；<br>8．其他任何有价值、可产生收入或有增值潜力并且有很好销路的东西。</p>\n<p>富爸爸总是强调<b>财务知识</b>。我对<b>会计和现金管理</b>懂得越多，我就越能更好地进行投资分析并开始建立自己的公司。</p>\n<p>关注自己的事业时，我的意思是建立自己牢固的资产。一旦把1美元投入了资产项，就不要让它出来。这1美元进了你的资产项，它就成了你的雇员。关于钱，最妙的就是让它可以一天24小时不间断工作，还能为你的子孙后代服务。你要照常去工作，做个努力的雇员，但要不断构筑你的资产项。</p>\n<p>那些能给子孙留下遗产的人和那些能长期富有的人，就是先构筑资产项，然后才用资产所产生的收入购买奢侈品的，而穷人和中产阶级则用他们的血汗钱和本应该留给子孙的遗产来购买奢侈品。<br>真正的奢侈品是对投资和积累真正资产的奖励。</p>\n<h2 id=\"第五章-第四课-税收的历史和公司的力量\"><a href=\"#第五章-第四课-税收的历史和公司的力量\" class=\"headerlink\" title=\"第五章 第四课 税收的历史和公司的力量\"></a>第五章 第四课 税收的历史和公司的力量</h2><p>税收的初衷是惩罚有钱人，而现实却是它惩罚了对它投赞同票的中产阶级和穷人。<br>税之所以被接受是因为大众相信罗宾汉式的经济理论，即劫富济贫。问题是政府对钱的胃口越来越大，以致中产阶级也要被征税，且税收的范围不断向穷人扩展。</p>\n<p>有产者和无产者之间的斗争已有几百年了，它是想“劫富”的人与富人之间的斗争。<br><i>在任何时候、任何地方只要制定法律，就会发生这种斗争。(什么意思？？)</i>斗争会永远持续下去，吃亏的人一定是无知者，即那些每天起来勤奋工作去付税的人。但是如果他们了解富人玩的游戏，他们也会来玩，这样他们就可以实现财务自由。</p>\n<p>每当人们想惩罚富人时，富人不会坐以待毙，而是进行反击。他们有钱、有能力、有决心去改变处境。</p>\n<p>学习让钱为我工作而不是我为钱工作的第一课，关系到力量。如果你为钱工作，你就把力量给了你的老板；如果让钱为你工作，你就能控制这种力量。</p>\n<p>我们还需要了解法律系统是如何运作的。如果你对法律一无所知，就很容易被欺负；如果你了解法律，你就有还击的机会。富爸爸高薪雇用聪明的会计师和律师的原因——付给他们的钱要比付给政府的少得多。“精于计算你就不会被别人牵着走”。<br>富爸爸了解法律，不仅因为他是一个守法的公民，还因为他知道不懂法律的代价有多么昂贵。</p>\n<p>财商（理财智商，Financial I. Q.）由4个方面的专门知识构成的：</p>\n<ul>\n<li>第一是会计，也就是我说的财务知识。你管理的钱越多，就越要精确，否则这幢大厦就会倒塌。这需要左脑来处理，是细节的部分。财务知识能帮助你读懂财务报表，还能让你辨别一项生意的优势和劣势。</li>\n<li>第二是投资，我把它称为钱生钱的科学。投资涉及策略和方案，这要右脑来做，是属于创造的部分。</li>\n<li>第三是了解市场，它是供给与需求的科学。这要求了解受感情驱动的市场的“技术面”。1996年圣诞节的搔痒娃娃大获成功就是一个受技术与感情影响的市场的最佳佐证。市场的另一个因素是“基本面”，或者说是一项投资的经济意义。一项投资究竟有无意义最终取决于当前的市场状况。搔痒娃娃是关于供求关系的一个很好的例子。同样的事也发生在股票、债券、房地产和棒球卡<br> 市场上。</li>\n<li>第四是法律。例如：利用一个具有会计、投资和市场运营的企业会使你的财富实现爆炸性地增长。了解减税优惠政策和公司法的人会比雇员和小业主更快致富。<ol>\n<li>减税优惠</li>\n<li>诉讼中获得保护</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"第六章-第五课-富人的投资\"><a href=\"#第六章-第五课-富人的投资\" class=\"headerlink\" title=\"第六章 第五课 富人的投资\"></a>第六章 第五课 富人的投资</h2><p>如果你把钱投进一笔交易然后只是祈祷，才是在赌博。在任何一项投资中，成功的办法都是运用你的技术知识、智慧以及对于这个游戏的热爱来减少意外、降低风险。<br>风险总是存在的，但你的财商可以提高你应付意外的能力</p>\n<p>财商之外的三种技能：</p>\n<ol>\n<li>如何寻找其他人忽视的机会</li>\n<li>如何增加资金</li>\n<li>怎样把精明的人组织起来  当你需要建议的时候，你一定要确定你选择的是明智的顾问。</li>\n</ol>\n<h2 id=\"第七章-第六课-学会不为钱工作\"><a href=\"#第七章-第六课-学会不为钱工作\" class=\"headerlink\" title=\"第七章 第六课 学会不为钱工作\"></a>第七章 第六课 学会不为钱工作</h2><p>大部分人需要学习和掌握不止一项技能，只有这样他们的收入才能获得显著增长。<br>工作是为了学习新东西</p>\n<h1 id=\"第二部分-开端\"><a href=\"#第二部分-开端\" class=\"headerlink\" title=\"第二部分 开端\"></a>第二部分 开端</h1><h2 id=\"第八章-克服困难\"><a href=\"#第八章-克服困难\" class=\"headerlink\" title=\"第八章 克服困难\"></a>第八章 克服困难</h2><p>掌握财务知识的人有时候还是不能积累丰厚的资产项，其主要原因有5个：<br>1．恐惧心理。 用资产进行投资却是一种高智商的游戏，需要胆量、耐心和对待失败的良好态度。。失败者回避失败，而失败本来是可以使失败者转变为成功者的。所以一定要“记住阿拉莫”。</p>\n<p>2．愤世嫉俗。愤世者抱怨现实，而成功者分析现实。抱怨蒙蔽人的头脑，而分析使人心明眼亮。分析能使成功者看到那些愤世者无法看到的东西，发现被其他人都忽视的机会。<br>‘我不想要’是成功的关键。不想去修理厕所，我才想出购买更多的房地产并将自己从“老鼠赛跑”中尽快解脱出来的办法。那些一直说“我不想去修理厕所”的人总是拒绝使用这个强有力的投资工具，修厕所总是比他们的财务自由重要。</p>\n<p>3．懒惰。忙碌的人常常是最懒惰的人。<br>那些过分忙于工作而不关心自己的财富的人。还有一些人过分地忙于工作而不照顾自己的身体。使这两种人如此忙碌的原因是一样的，他们把忙碌作为逃避问题的借口。没有人告诉他们这些，但他们心里其实很明白。事实上，如果你去提醒他们，他们往往还会很不高兴。如果他们不忙着工作或是与孩子在一起，就会忙着看电视、钓鱼、打高尔夫球和购物。总之，他们内心很清楚自己是在逃避一些很重要的事情。这是懒惰最普遍的表现形式，一种通过忙碌掩饰下的懒惰。<br>“我可付不起”这句话禁锢了你的思想，使你无法进一步思考。“我怎样才能付得起”这句话则开启了你的头脑，迫使你去思考并寻求答案。<br>每当你发现自己在逃避你内心清楚应该去做的事情时，就应该问问自己：“我还能得到什么？</p>\n<p>4．不良习惯。<br>5．自负。傲慢是自大和无知的结合体。<br>每当我自高自大时，我就认为我不知道的东西并不重要。<br>如果你知道自己在某一问题上有所欠缺，你就应该找一位本领域的专家或是一本相关的书，马上开始教育自己。</p>\n<h1 id=\"第三部分-开始行动\"><a href=\"#第三部分-开始行动\" class=\"headerlink\" title=\"第三部分 开始行动\"></a>第三部分 开始行动</h1><h2 id=\"第九章-开始行动\"><a href=\"#第九章-开始行动\" class=\"headerlink\" title=\"第九章 开始行动\"></a>第九章 开始行动</h2><ol>\n<li><p>我需要一个超现实的理由——精神的力量。发自内心深处的精神动力。<br>“不想要”促成“想要”的例子。我不想将一生都耗在工作上；我不想要父辈们渴望的那些东西，如稳定的工作和一套郊区的房子；我不想做一个打工仔；我讨厌我爸爸因为忙于工作而总是错过我的橄榄球比赛；我讨厌我爸爸终身努力工作，但在他去世时却失去了他几乎所有的东西，他甚至不能把自己辛苦一生的所得留给孩子。而富人不会那样做，他们会努力工作，然后将工作成果留给孩子们。<br>其次是“想要”。我想自由自在地周游世界，我想以自己喜欢的方式生活，我想在年轻的时候就能做到这些，我想自由支配自己的时间和生活，我想要金钱为我工作。</p>\n</li>\n<li><p>每天作出自己的选择——选择的力量。<br>思考这样两件事情：第一是时间，这是你最珍贵的资产；第二是学习，正因为你没有钱，就更要去学习。<br>我们每天都应该作出一个选择，这个选择是我们利用自己的时间、金钱和头脑里学到的东西作出的。这就是选择的力量。我们都有机会。我选择成为富人，每天都在为此而努力。<br>首先投资于教育。每个人都要选择要学习什么样的知识。你可以整天看音乐电视，也可以阅读高尔夫球杂志、上陶艺班或是理财规划培训班，你可以进行选择。</p>\n</li>\n<li><p>慎重选择朋友 – 关系的力量<br>我不会把理财状况作为挑选朋友的标准。我既有穷困潦倒的朋友，也有每年都有数百万美元进账的朋友，因为我相信“三人行，必有我师”，我愿意努力向他们学习。<br>特意交一些有钱的朋友学习他们得以致富的知识。注意我有钱的朋友是如何谈论金钱的（我不是指他们的夸夸其谈）。另一些朋友经济上很困难，他们不爱谈论金钱、生意或投资，他们认为这既粗俗又不明智。但我也能从他们那里学到许多知识，我会知道什么东西不可以去做。</p>\n</li>\n</ol>\n<p>广播节目通常会见到一帮所谓的“专家”。一位专家说市场正在走向衰退，另一位却声称市场正在趋于繁荣。如果你很精明，两方的话你都要听。保持一种开放的心态，因为两种说法都有合理的地方。</p>\n<p>在积累财富的过程中，最困难的事情莫过于坚持自己的选择而不盲目从众。因为在竞争激烈的市场上，群体往往会反应迟钝，成为被“宰割”的对象。如果一项大宗交易被列在投资杂志的首页，在多数情况下你此刻去投资恐怕为时已晚，这时你应该去寻找新的机会。<br>就像冲浪者经常说的那样：“总会有新的浪头过来。”人们总是匆匆忙忙去赶那已经过去的浪头，往往又会被新的浪头淘汰出局。</p>\n<p>精明的投资者不会抱怨市场时机不对，如果错过了这个“浪头”，他们就会去寻找下一个，并且在其中找到自己的位置。</p>\n<p>你要去结交有钱的朋友，因为他们更加接近内部，而钱就是由“内线信息”挣来的。这样你就能在市场繁荣之前买进，在危机之前卖出。我不是要你去做非法的事，但是，你越早得到信息，获利的机会就越大，风险也会越小，这就是朋友的作用。这也是一种财商。<br>4. 掌握一种模式，然后再学习一种新的模式——快速学习的力量。</p>\n<ol start=\"5\">\n<li>首先支付自己——自律的力量。如果你控制不了自己，就别想着致富.</li>\n</ol>\n<p>能否自律是将富人、穷人和中产阶级区分开来的首要因素。</p>\n<p>生活之所以能推着你转，不是因为生活的力量很强大，而是因为你缺乏自律。</p>\n<p>开创事业所必备的最重要的3种管理技能是：<br>1．现金流管理。<br>2．人事管理。<br>3．个人时间管理。<br>这3项管理技能不仅适用于企业，而且还适用其他地方。比如，管理自己的日常生活、家庭、企业、慈善组织、城市甚至是国家。</p>\n<ol start=\"6\">\n<li><p>给你的经纪人以优厚的报酬——好建议的力量。<br>人事管理是重要的管理技能之一。许多人只会管理不如自己聪明的人或是能力不如自己的人，比如下属。许多中层管理人员一直停留在中层，就是因为他们只知道如何与职位低于自己的人一起工作，却不善于和比自己职位高的人一起工作。真正的技能是在某些技术领域能够管理比你更聪明的人并给他们提供优厚的报酬。这也是为什么公司要拥有一个董事会的原因，你应该有这种顾问，而这也是你的财商。</p>\n</li>\n<li><p>做一个“印第安给予者”——无私的力量。<br>明智的投资者不只看到投资回报率，而且还能看到，一旦收回投资，就能额外得到的资产。这也是财商。<br>我投资的项目都是在我能承担的损失范围之内的。我承认，在平均每10项投资中，我会有2～3项赢利，5～6项不赚不赔，2～3项亏本。但是我会将自己可能发生的损失限制在那个时期我所拥有的资金量的范围之内。</p>\n</li>\n<li><p>用资产来购买奢侈品——专注的力量。<br>我习惯于用消费的欲望来激发并利用我的理财天赋去投资</p>\n</li>\n<li><p>对英雄的崇拜 – 神话的力量</p>\n</li>\n<li><p>先予后取——给予的力量。<br>一个人抱着柴火坐在寒冷的夜里，冲着一只大火炉叫道：“你什么时候给我温暖，我就什么时候给你添柴火。”</p>\n</li>\n</ol>\n<p>在这个世界上有人比我们更聪明，你也许可以凭借自己的努力取得成功，但是如果有了这些人的帮助，你的成功之路也许就会更平坦。你应当做的就是：慷慨一些。反过来，那些人也会慷慨地对你。</p>\n<h2 id=\"第十章-还想要更多吗？这里有一些要做的事\"><a href=\"#第十章-还想要更多吗？这里有一些要做的事\" class=\"headerlink\" title=\"第十章 还想要更多吗？这里有一些要做的事\"></a>第十章 还想要更多吗？这里有一些要做的事</h2><p>大部分卖主的要价过高，很少有要价低于标的物的实际价值。</p>\n<p>多发出几份报价。没卖过东西的人，对想卖出东西的迫切心情是不会理解的。我有一处房产，想在数月之内卖掉，当时我愿意接受任何报价，不会在意价格有多低，即使他们只给我10头猪我也会非常高兴。报价本身并不重要，关键是有人感兴趣。也许我会反过来建议对方以一个猪圈交换房产也不一定呢，游戏就是这样的。记住，做买卖就是一场有趣的游戏。你提出报价之后，可能对方就会说：“成交。”</p>\n<p>寻找一桩好生意、一家好企业、一位合适的人、一位合适的投资者，或任何类似的东西，就如同约会一样。你必须到市场上去和许多人谈，做许多报价、还价、谈判、拒绝或者接受。我知道有些单身的人宁可在家里坐等电话铃响，但是，除非你是辛迪·克劳馥或者汤姆·克鲁斯，否则你<b>最好还是到市场上去</b>，即使只是一家超市也好。从寻找、报价、拒绝、谈判到成交，几乎是人的一生中要经历的全部过程。</p>\n<p>与人聊天获取信息的技巧，获取信息</p>\n<h3 id=\"我首先寻找想买进的人，然后才去找想卖出的人\"><a href=\"#我首先寻找想买进的人，然后才去找想卖出的人\" class=\"headerlink\" title=\"我首先寻找想买进的人，然后才去找想卖出的人\"></a>我首先寻找想买进的人，然后才去找想卖出的人</h3><p>1</p>\n<h3 id=\"零售商喜欢提供数量折扣，就是因为大部分商人都喜欢大额购买的人。\"><a href=\"#零售商喜欢提供数量折扣，就是因为大部分商人都喜欢大额购买的人。\" class=\"headerlink\" title=\"零售商喜欢提供数量折扣，就是因为大部分商人都喜欢大额购买的人。\"></a>零售商喜欢提供数量折扣，就是因为大部分商人都喜欢大额购买的人。</h3><p><b>即使你的投资规模很小，你也可以多考虑考虑大生意。</b><br>举例：当我的公司想购买电脑时，我就打电话给几位朋友，问他们是否也要买电脑。。接着我们到不同的零售商那里进行谈判，尽量压低价格，因为我们购买电脑的数量很大。<br>小规模投资人善于小规模的动作，因为他们思考的范围太狭窄，他们总是单干，从不协同作战。</p>\n<h3 id=\"学习前人经验。\"><a href=\"#学习前人经验。\" class=\"headerlink\" title=\"学习前人经验。\"></a>学习前人经验。</h3><p>行动的人总会击败不行动的人。</p>\n<h1 id=\"结束语-怎样用7000美元支付孩子的大学费用\"><a href=\"#结束语-怎样用7000美元支付孩子的大学费用\" class=\"headerlink\" title=\"结束语　怎样用7000美元支付孩子的大学费用\"></a>结束语　怎样用7000美元支付孩子的大学费用</h1><p>金钱是一种观念，如果你想要更多的钱，需要改变你的思想。<br>金钱是一种观念，如果你想要更多的钱，只需改变你的思想。任何一个白手起家的人都是在某种思想的指导下，从小生意做起，然后不断做大。投资也是如此，起初只需投入一点钱，最后增长到很大数额。</p>\n<p>采取行动吧<br>上天赐予我们每个人两样伟大的礼物：思想和时间。你可以运用这两件礼物去做你愿意做的事情。</p>\n<p>没有其他人比你更适合来开启你的孩子的财商。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"序言-这就是你需要的\"><a href=\"#序言-这就是你需要的\" class=\"headerlink\" title=\"序言 这就是你需要的\"></a>序言 这就是你需要的</h1><h1 id=\"第一部分-课程\"><a href=\"#第一部分-课程\" class=\"headerlink\" title=\"第一部分 课程\"></a>第一部分 课程</h1><h2 id=\"第一章-穷爸爸，富爸爸\"><a href=\"#第一章-穷爸爸，富爸爸\" class=\"headerlink\" title=\"第一章 穷爸爸，富爸爸\"></a>第一章 穷爸爸，富爸爸</h2><ol>\n<li><p>贪财乃万恶之源，</p>\n</li>\n<li><p>贫穷才是万恶之本</p>\n</li>\n<li><p>思考问题，做出自己的选择而不是简单接受或否定</p>\n</li>\n<li><p>钱是一种力量，但更有力量的是财商教育。钱来了又会去，了解钱是如何运动的，获得驾驭它的力量。就能开始积累财富。</p>\n</li>\n</ol>\n<h2 id=\"第二章-第一课-富人不为钱工作\"><a href=\"#第二章-第一课-富人不为钱工作\" class=\"headerlink\" title=\"第二章 第一课 富人不为钱工作\"></a>第二章 第一课 富人不为钱工作</h2><p>多数人都希望有一份工资收入，因为他们都有恐惧和贪婪之心。一开始，没钱的恐惧会促使他们努力工作，得到报酬后，贪婪或欲望又让他们想拥有所有用钱能买到的好东西。于是就形成了一种模式。 起床，上班，付账，再起床，再上班，再付账…… 他们的生活从此被这两种感觉所控制：恐惧和贪婪。给他们更多的钱，他们就会以更高的开支重复这种循环。</p>\n<p><b>弄清楚事情的真相</b><br>无需告诉别人你的感觉，只有你自己知道。<br>害怕没有钱，更没有直面这种恐惧，对此他们虽然在情感上有所反应但并没有动脑筋想办法。<br>他们手中有点小钱，可享乐、欲望和贪婪会立刻控制他们，他们会再次作出反应，仍然是不假思索。他们的感情代替了他们的思想。</p>\n<p>他们并不清楚自己真正的感觉，只是作出反应，而不去思考。他们感到恐惧，于是就去工作，希望钱能消除恐惧，但没有奏效。于是，恐惧追逐着他们，他们只好又去工作，再一次期望钱能平复这种恐惧，但还是没有成功。恐惧使他们落入工作的陷阱，挣钱——工作——挣钱，希望恐惧就此烟消云散。钱主宰着他们的生活，他们拒绝去分辨真相，钱控制了他们的情感和灵魂。</p>\n<p>奇怪大人们为什么总是急急忙忙去工作，而工作看起来并没什么乐趣可言，而且他们也不快活，但好像总有些东西逼着他们去工作。</p>\n<p>富爸爸说：“我希望你们能避开这个陷阱，这就是我真正想教你们的，而不只是发财，因为发财并不能解决问题。”</p>\n<p>欲望。有人把它称为贪婪，但我更喜欢用欲望这个词。<br>希望拥有一些更好、更漂亮、更有趣或更令人激动的东西，这是相当正常的。<br>人们也为了实现欲望而工作。认为钱能买来快乐，可用钱买来的快乐往往是短暂的，所以不久就需要更多的钱来买更多的快乐、更多的开心、更多的舒适和更多的安全感。于是他们继续工作，以为钱能安抚他们备受恐惧和欲望折磨的灵魂，但实际上钱是无法做到这一点的。</p>\n<p>许多人致富并非出于欲望而是由于恐惧，他们认为钱能消除贫困带来的恐惧，所以他们积攒了很多的钱，却发现恐惧感更加强烈了。害怕失去钱。一些朋友，已经很有钱了，但还在拼命工作。我还认识一些百万富翁，他们现在甚至比他们穷困时还要恐惧，他们害怕失去所有的钱。他们越富有，这种感觉就越强烈。他们灵魂中软弱贫乏的一面总是在大声尖叫，他们不想失去大房子、车子和钱带给他们的上等生活。他们甚至担心一旦没钱了，朋友们会看不起他们。许多人变得绝望而神经质，尽管他们很富有。</p>\n<p>那穷人是不是要快活一点？可不这么认为,不谈钱就像依赖钱一样是一种精神上的疾病。”我对钱不感兴趣。我工作是因为我热爱这个职业。”不要用这句话来掩藏他内心真实的感受。</p>\n<p>我们该怎么办呢？不为钱工作直到不再有恐惧和贪婪吗？不，那只会浪费时间。正是因为有感情，我们才成为人。<i>感情使我们更加真实，它是我们行动的动力。忠实于你的感情，以你喜欢的方式运用你的头脑和感情，不要让它们控制你。</i></p>\n<p>“去上学，取得好成绩，这样你就能找到一份安稳的工作”。大多数人都这么给别人建议，而且对于大多数人来说这也确实是个好主意。但人们仍是基于恐惧才给出这样的建议的。<br>他担心你将来挣不到钱，在这个社会上过得不好。别误解我的话，他爱你而且希望你能够一帆风顺。我认为他的担心不无道理。教育和工作是很重要的，可它们对付不了恐惧。实际上，促使他每天去上班挣钱的恐惧也使得他热衷于让你去上学。</p>\n<p><b>学会支配钱</b>而不是害怕它，这是在学校里学不到的。如果不学，你就会变成金钱的奴隶。</p>\n<p>我们在根本上都是雇员，只是层次不同而已.避开由恐惧和欲望组成的陷阱，按照你们喜欢的方式利用恐惧和欲望，而不要让它们控制你们。如果你们不先控制恐惧和欲望，即使你们获得高薪，也只不过是金钱的奴隶而已。</p>\n<p>造成贫困和财务问题的主要原因是恐惧和无知，而不是经济环境、政府或者富人。<br>人们自身的恐惧和无知使他们困在陷阱里，所以你们应该去上学、接受高等教育。让我来叫你们如何处理金钱和恐惧，怎样不落入陷阱。</p>\n<p>在我用更高的工资诱惑你们时，你们感觉怎样？非常想要吗？你们没有屈服于自己的感觉，你们没有立刻作出决定。这一点最重要。我们总是会有恐惧、贪婪的时候。运用感情作长远打算，别让感情控制了思想。大多数人让恐惧和贪婪来支配自己，这是无知的开始。因为恐惧和贪婪，大多数人一生都在追求工资、加薪和职业保障，从来不问这种感情支配思想的生活之路将通向哪里。</p>\n<p>“你的意思是，当我幻想新棒球手套、糖果和玩具时，就像那头驴子和它面前的胡萝卜一样？”<br>“不错。当你长大后，你想要的玩具会更贵，会变成要让你的朋友羡慕的汽车、游艇和大房子，”富爸爸笑着说，“恐惧把你推出门外，欲望又开始召唤你，诱惑你去触礁。这就是陷阱。”</p>\n<p>人生实际上是在无知和觉醒之间的一场斗争。<br>他说一个人一旦停止了解有关自己的知识和信息，就会变得无知。这种斗争实际上就是你时刻都要做的一种决定：是通过不断学习打开自己的心扉，还是封闭自己的头脑<br>学校培养了教师、医生、工程师、艺术家、厨师、商人、警察、消防员、士兵但不幸的是，对许多人来说，离开学校是学习的终点而不是起点。这些人才，所以我们的社会才能蒸蒸日上。</p>\n<p>永远不要忘记，你有两种感情——恐惧和欲望，如果你让它们来控制你的思想，你就会落入一生中最大的陷阱。一直生活在恐惧中，从不追求自己的梦想，这是残酷的。为钱拼命工作，以为钱能买来快乐，这也是残酷的。半夜醒来想着还有许多账单要付是一种可怕的生活方式，以工资的多少来决定过什么样的生活不是真正的生活。认为工作会给你带来安全感其实是在欺骗自己。</p>\n<p>成年后，我发觉向其他成年人解释什么是资产、什么是负债十分困难。为什么呢？<br>因为成年人更聪明。大多数情况下，大多数的成年人没有掌握这个简单的道理，是因为他们已有了不同的教育背景。他们被其他受过高等教育的专家，比如银行家、会计师、房地产商、财务规划师等教过，于是就很难忘记已经学过的东西，变得像孩子一样简单。</p>\n<p>对资产的定义不是用词语而是用数字来表达的。如果你读不懂数字，就不知道什么是资产。关键不是数字，而是数字要告诉你的东西。</p>\n<p>财务知识是十分重要的，它包括对文字和数字两方面的理解。看不懂关于财务的文字或读不懂数字的含义，是产生财务问题的根本原因。</p>\n<p>更多的钱往往不能解决问题，实际上可能使问题变得更加严重。钱往往能暴露人性中那些可悲的弱点，并凸显人们的无知。<br>钱只会让你头脑中的现金流的模式更加明显，如果你的模式是把收入都花掉，那么最可能的结果是在增加收入的同时也增加支出。</p>\n<p>大多数人不明白自己为什么会遭遇财务困境，这是因为他们不明白现金流。</p>\n<h2 id=\"第三章-第二课-为什么要教授财务知识\"><a href=\"#第三章-第二课-为什么要教授财务知识\" class=\"headerlink\" title=\"第三章 第二课 为什么要教授财务知识\"></a>第三章 第二课 为什么要教授财务知识</h2><p>真正的问题在于他们选择的消费方式，那才是他们在财务困境中苦苦挣扎的原因<br>大多数人并不真正懂得钱的意义，因此只能被钱控制，和钱对抗。<br>钱的意义是什么？？？</p>\n<p>聪明人总是雇用比他更聪明的人</p>\n<p>财富增长：资产产生的收益高于负债产生的支出。</p>\n<h2 id=\"第四章-第三课-关住自己的事业\"><a href=\"#第四章-第三课-关住自己的事业\" class=\"headerlink\" title=\"第四章 第三课 关住自己的事业\"></a>第四章 第三课 关住自己的事业</h2><p>麦当劳：麦当劳的基本业务是出售麦当劳各个分店。他一向很重视每个分店的地理位置，因为他知道房产和位置将是每个分店获得成功的最重要的因素。实际上，是那些买下分店的人在为麦当劳买下的土地支付费用。<br>麦当劳今天已经是世界上最大的独立房地产商了，它拥有的房地产甚至比天主教会还多。今天，麦当劳在美国以及世界其他地方都拥有一些位于街角和十字路口的黄金地段。</p>\n<p>大多数人工作其实是为其他人，而非他们自己。首先他们要为公司的老板工作，其次是通过纳税为政府工作，最后是为向他们提供住房按揭贷款的银行工作。</p>\n<p><b>这就是致富的第三个秘诀：关注自己的事业</b></p>\n<p>你的事业是什么？<br>我经常问人们：“你的事业是什么？”他们会说：“我在银行工作。”接着我问他们是否拥有一家银行，他们通常回答：“不是的，我只在那儿工作。”。<b>他们混淆了他们的职业和事业，他们可以在银行工作，但他们仍应有自己的事业。</b>雷·克罗克他的职业总是不变的，他是个商人。他卖过牛奶搅拌器，后来又转卖汉堡包。但在他卖麦当劳分店的时候，他的事业是购买能产生收入的地产。</p>\n<p>学校的问题是你在那里学到什么，就会从事什么。从事你所学的专业的可怕后果在于，它会让你忘记关注自己的事业。人们耗尽一生去关注别人的事业并使他人致富。</p>\n<p>真正的资产可以分为以下几类：<br>1．不需我到场就可以正常运作的业务。我拥有它们，但由别人经营和管理。如果我必须在那儿工作，那它就不是我的事业而是我的职业了；<br>2．股票；<br>3．债券；<br>4．共同基金；<br>5．能够产生收入的房地产；<br>6．票据（借据）；<br>7．版税，如音乐、手稿、专利；<br>8．其他任何有价值、可产生收入或有增值潜力并且有很好销路的东西。</p>\n<p>富爸爸总是强调<b>财务知识</b>。我对<b>会计和现金管理</b>懂得越多，我就越能更好地进行投资分析并开始建立自己的公司。</p>\n<p>关注自己的事业时，我的意思是建立自己牢固的资产。一旦把1美元投入了资产项，就不要让它出来。这1美元进了你的资产项，它就成了你的雇员。关于钱，最妙的就是让它可以一天24小时不间断工作，还能为你的子孙后代服务。你要照常去工作，做个努力的雇员，但要不断构筑你的资产项。</p>\n<p>那些能给子孙留下遗产的人和那些能长期富有的人，就是先构筑资产项，然后才用资产所产生的收入购买奢侈品的，而穷人和中产阶级则用他们的血汗钱和本应该留给子孙的遗产来购买奢侈品。<br>真正的奢侈品是对投资和积累真正资产的奖励。</p>\n<h2 id=\"第五章-第四课-税收的历史和公司的力量\"><a href=\"#第五章-第四课-税收的历史和公司的力量\" class=\"headerlink\" title=\"第五章 第四课 税收的历史和公司的力量\"></a>第五章 第四课 税收的历史和公司的力量</h2><p>税收的初衷是惩罚有钱人，而现实却是它惩罚了对它投赞同票的中产阶级和穷人。<br>税之所以被接受是因为大众相信罗宾汉式的经济理论，即劫富济贫。问题是政府对钱的胃口越来越大，以致中产阶级也要被征税，且税收的范围不断向穷人扩展。</p>\n<p>有产者和无产者之间的斗争已有几百年了，它是想“劫富”的人与富人之间的斗争。<br><i>在任何时候、任何地方只要制定法律，就会发生这种斗争。(什么意思？？)</i>斗争会永远持续下去，吃亏的人一定是无知者，即那些每天起来勤奋工作去付税的人。但是如果他们了解富人玩的游戏，他们也会来玩，这样他们就可以实现财务自由。</p>\n<p>每当人们想惩罚富人时，富人不会坐以待毙，而是进行反击。他们有钱、有能力、有决心去改变处境。</p>\n<p>学习让钱为我工作而不是我为钱工作的第一课，关系到力量。如果你为钱工作，你就把力量给了你的老板；如果让钱为你工作，你就能控制这种力量。</p>\n<p>我们还需要了解法律系统是如何运作的。如果你对法律一无所知，就很容易被欺负；如果你了解法律，你就有还击的机会。富爸爸高薪雇用聪明的会计师和律师的原因——付给他们的钱要比付给政府的少得多。“精于计算你就不会被别人牵着走”。<br>富爸爸了解法律，不仅因为他是一个守法的公民，还因为他知道不懂法律的代价有多么昂贵。</p>\n<p>财商（理财智商，Financial I. Q.）由4个方面的专门知识构成的：</p>\n<ul>\n<li>第一是会计，也就是我说的财务知识。你管理的钱越多，就越要精确，否则这幢大厦就会倒塌。这需要左脑来处理，是细节的部分。财务知识能帮助你读懂财务报表，还能让你辨别一项生意的优势和劣势。</li>\n<li>第二是投资，我把它称为钱生钱的科学。投资涉及策略和方案，这要右脑来做，是属于创造的部分。</li>\n<li>第三是了解市场，它是供给与需求的科学。这要求了解受感情驱动的市场的“技术面”。1996年圣诞节的搔痒娃娃大获成功就是一个受技术与感情影响的市场的最佳佐证。市场的另一个因素是“基本面”，或者说是一项投资的经济意义。一项投资究竟有无意义最终取决于当前的市场状况。搔痒娃娃是关于供求关系的一个很好的例子。同样的事也发生在股票、债券、房地产和棒球卡<br> 市场上。</li>\n<li>第四是法律。例如：利用一个具有会计、投资和市场运营的企业会使你的财富实现爆炸性地增长。了解减税优惠政策和公司法的人会比雇员和小业主更快致富。<ol>\n<li>减税优惠</li>\n<li>诉讼中获得保护</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"第六章-第五课-富人的投资\"><a href=\"#第六章-第五课-富人的投资\" class=\"headerlink\" title=\"第六章 第五课 富人的投资\"></a>第六章 第五课 富人的投资</h2><p>如果你把钱投进一笔交易然后只是祈祷，才是在赌博。在任何一项投资中，成功的办法都是运用你的技术知识、智慧以及对于这个游戏的热爱来减少意外、降低风险。<br>风险总是存在的，但你的财商可以提高你应付意外的能力</p>\n<p>财商之外的三种技能：</p>\n<ol>\n<li>如何寻找其他人忽视的机会</li>\n<li>如何增加资金</li>\n<li>怎样把精明的人组织起来  当你需要建议的时候，你一定要确定你选择的是明智的顾问。</li>\n</ol>\n<h2 id=\"第七章-第六课-学会不为钱工作\"><a href=\"#第七章-第六课-学会不为钱工作\" class=\"headerlink\" title=\"第七章 第六课 学会不为钱工作\"></a>第七章 第六课 学会不为钱工作</h2><p>大部分人需要学习和掌握不止一项技能，只有这样他们的收入才能获得显著增长。<br>工作是为了学习新东西</p>\n<h1 id=\"第二部分-开端\"><a href=\"#第二部分-开端\" class=\"headerlink\" title=\"第二部分 开端\"></a>第二部分 开端</h1><h2 id=\"第八章-克服困难\"><a href=\"#第八章-克服困难\" class=\"headerlink\" title=\"第八章 克服困难\"></a>第八章 克服困难</h2><p>掌握财务知识的人有时候还是不能积累丰厚的资产项，其主要原因有5个：<br>1．恐惧心理。 用资产进行投资却是一种高智商的游戏，需要胆量、耐心和对待失败的良好态度。。失败者回避失败，而失败本来是可以使失败者转变为成功者的。所以一定要“记住阿拉莫”。</p>\n<p>2．愤世嫉俗。愤世者抱怨现实，而成功者分析现实。抱怨蒙蔽人的头脑，而分析使人心明眼亮。分析能使成功者看到那些愤世者无法看到的东西，发现被其他人都忽视的机会。<br>‘我不想要’是成功的关键。不想去修理厕所，我才想出购买更多的房地产并将自己从“老鼠赛跑”中尽快解脱出来的办法。那些一直说“我不想去修理厕所”的人总是拒绝使用这个强有力的投资工具，修厕所总是比他们的财务自由重要。</p>\n<p>3．懒惰。忙碌的人常常是最懒惰的人。<br>那些过分忙于工作而不关心自己的财富的人。还有一些人过分地忙于工作而不照顾自己的身体。使这两种人如此忙碌的原因是一样的，他们把忙碌作为逃避问题的借口。没有人告诉他们这些，但他们心里其实很明白。事实上，如果你去提醒他们，他们往往还会很不高兴。如果他们不忙着工作或是与孩子在一起，就会忙着看电视、钓鱼、打高尔夫球和购物。总之，他们内心很清楚自己是在逃避一些很重要的事情。这是懒惰最普遍的表现形式，一种通过忙碌掩饰下的懒惰。<br>“我可付不起”这句话禁锢了你的思想，使你无法进一步思考。“我怎样才能付得起”这句话则开启了你的头脑，迫使你去思考并寻求答案。<br>每当你发现自己在逃避你内心清楚应该去做的事情时，就应该问问自己：“我还能得到什么？</p>\n<p>4．不良习惯。<br>5．自负。傲慢是自大和无知的结合体。<br>每当我自高自大时，我就认为我不知道的东西并不重要。<br>如果你知道自己在某一问题上有所欠缺，你就应该找一位本领域的专家或是一本相关的书，马上开始教育自己。</p>\n<h1 id=\"第三部分-开始行动\"><a href=\"#第三部分-开始行动\" class=\"headerlink\" title=\"第三部分 开始行动\"></a>第三部分 开始行动</h1><h2 id=\"第九章-开始行动\"><a href=\"#第九章-开始行动\" class=\"headerlink\" title=\"第九章 开始行动\"></a>第九章 开始行动</h2><ol>\n<li><p>我需要一个超现实的理由——精神的力量。发自内心深处的精神动力。<br>“不想要”促成“想要”的例子。我不想将一生都耗在工作上；我不想要父辈们渴望的那些东西，如稳定的工作和一套郊区的房子；我不想做一个打工仔；我讨厌我爸爸因为忙于工作而总是错过我的橄榄球比赛；我讨厌我爸爸终身努力工作，但在他去世时却失去了他几乎所有的东西，他甚至不能把自己辛苦一生的所得留给孩子。而富人不会那样做，他们会努力工作，然后将工作成果留给孩子们。<br>其次是“想要”。我想自由自在地周游世界，我想以自己喜欢的方式生活，我想在年轻的时候就能做到这些，我想自由支配自己的时间和生活，我想要金钱为我工作。</p>\n</li>\n<li><p>每天作出自己的选择——选择的力量。<br>思考这样两件事情：第一是时间，这是你最珍贵的资产；第二是学习，正因为你没有钱，就更要去学习。<br>我们每天都应该作出一个选择，这个选择是我们利用自己的时间、金钱和头脑里学到的东西作出的。这就是选择的力量。我们都有机会。我选择成为富人，每天都在为此而努力。<br>首先投资于教育。每个人都要选择要学习什么样的知识。你可以整天看音乐电视，也可以阅读高尔夫球杂志、上陶艺班或是理财规划培训班，你可以进行选择。</p>\n</li>\n<li><p>慎重选择朋友 – 关系的力量<br>我不会把理财状况作为挑选朋友的标准。我既有穷困潦倒的朋友，也有每年都有数百万美元进账的朋友，因为我相信“三人行，必有我师”，我愿意努力向他们学习。<br>特意交一些有钱的朋友学习他们得以致富的知识。注意我有钱的朋友是如何谈论金钱的（我不是指他们的夸夸其谈）。另一些朋友经济上很困难，他们不爱谈论金钱、生意或投资，他们认为这既粗俗又不明智。但我也能从他们那里学到许多知识，我会知道什么东西不可以去做。</p>\n</li>\n</ol>\n<p>广播节目通常会见到一帮所谓的“专家”。一位专家说市场正在走向衰退，另一位却声称市场正在趋于繁荣。如果你很精明，两方的话你都要听。保持一种开放的心态，因为两种说法都有合理的地方。</p>\n<p>在积累财富的过程中，最困难的事情莫过于坚持自己的选择而不盲目从众。因为在竞争激烈的市场上，群体往往会反应迟钝，成为被“宰割”的对象。如果一项大宗交易被列在投资杂志的首页，在多数情况下你此刻去投资恐怕为时已晚，这时你应该去寻找新的机会。<br>就像冲浪者经常说的那样：“总会有新的浪头过来。”人们总是匆匆忙忙去赶那已经过去的浪头，往往又会被新的浪头淘汰出局。</p>\n<p>精明的投资者不会抱怨市场时机不对，如果错过了这个“浪头”，他们就会去寻找下一个，并且在其中找到自己的位置。</p>\n<p>你要去结交有钱的朋友，因为他们更加接近内部，而钱就是由“内线信息”挣来的。这样你就能在市场繁荣之前买进，在危机之前卖出。我不是要你去做非法的事，但是，你越早得到信息，获利的机会就越大，风险也会越小，这就是朋友的作用。这也是一种财商。<br>4. 掌握一种模式，然后再学习一种新的模式——快速学习的力量。</p>\n<ol start=\"5\">\n<li>首先支付自己——自律的力量。如果你控制不了自己，就别想着致富.</li>\n</ol>\n<p>能否自律是将富人、穷人和中产阶级区分开来的首要因素。</p>\n<p>生活之所以能推着你转，不是因为生活的力量很强大，而是因为你缺乏自律。</p>\n<p>开创事业所必备的最重要的3种管理技能是：<br>1．现金流管理。<br>2．人事管理。<br>3．个人时间管理。<br>这3项管理技能不仅适用于企业，而且还适用其他地方。比如，管理自己的日常生活、家庭、企业、慈善组织、城市甚至是国家。</p>\n<ol start=\"6\">\n<li><p>给你的经纪人以优厚的报酬——好建议的力量。<br>人事管理是重要的管理技能之一。许多人只会管理不如自己聪明的人或是能力不如自己的人，比如下属。许多中层管理人员一直停留在中层，就是因为他们只知道如何与职位低于自己的人一起工作，却不善于和比自己职位高的人一起工作。真正的技能是在某些技术领域能够管理比你更聪明的人并给他们提供优厚的报酬。这也是为什么公司要拥有一个董事会的原因，你应该有这种顾问，而这也是你的财商。</p>\n</li>\n<li><p>做一个“印第安给予者”——无私的力量。<br>明智的投资者不只看到投资回报率，而且还能看到，一旦收回投资，就能额外得到的资产。这也是财商。<br>我投资的项目都是在我能承担的损失范围之内的。我承认，在平均每10项投资中，我会有2～3项赢利，5～6项不赚不赔，2～3项亏本。但是我会将自己可能发生的损失限制在那个时期我所拥有的资金量的范围之内。</p>\n</li>\n<li><p>用资产来购买奢侈品——专注的力量。<br>我习惯于用消费的欲望来激发并利用我的理财天赋去投资</p>\n</li>\n<li><p>对英雄的崇拜 – 神话的力量</p>\n</li>\n<li><p>先予后取——给予的力量。<br>一个人抱着柴火坐在寒冷的夜里，冲着一只大火炉叫道：“你什么时候给我温暖，我就什么时候给你添柴火。”</p>\n</li>\n</ol>\n<p>在这个世界上有人比我们更聪明，你也许可以凭借自己的努力取得成功，但是如果有了这些人的帮助，你的成功之路也许就会更平坦。你应当做的就是：慷慨一些。反过来，那些人也会慷慨地对你。</p>\n<h2 id=\"第十章-还想要更多吗？这里有一些要做的事\"><a href=\"#第十章-还想要更多吗？这里有一些要做的事\" class=\"headerlink\" title=\"第十章 还想要更多吗？这里有一些要做的事\"></a>第十章 还想要更多吗？这里有一些要做的事</h2><p>大部分卖主的要价过高，很少有要价低于标的物的实际价值。</p>\n<p>多发出几份报价。没卖过东西的人，对想卖出东西的迫切心情是不会理解的。我有一处房产，想在数月之内卖掉，当时我愿意接受任何报价，不会在意价格有多低，即使他们只给我10头猪我也会非常高兴。报价本身并不重要，关键是有人感兴趣。也许我会反过来建议对方以一个猪圈交换房产也不一定呢，游戏就是这样的。记住，做买卖就是一场有趣的游戏。你提出报价之后，可能对方就会说：“成交。”</p>\n<p>寻找一桩好生意、一家好企业、一位合适的人、一位合适的投资者，或任何类似的东西，就如同约会一样。你必须到市场上去和许多人谈，做许多报价、还价、谈判、拒绝或者接受。我知道有些单身的人宁可在家里坐等电话铃响，但是，除非你是辛迪·克劳馥或者汤姆·克鲁斯，否则你<b>最好还是到市场上去</b>，即使只是一家超市也好。从寻找、报价、拒绝、谈判到成交，几乎是人的一生中要经历的全部过程。</p>\n<p>与人聊天获取信息的技巧，获取信息</p>\n<h3 id=\"我首先寻找想买进的人，然后才去找想卖出的人\"><a href=\"#我首先寻找想买进的人，然后才去找想卖出的人\" class=\"headerlink\" title=\"我首先寻找想买进的人，然后才去找想卖出的人\"></a>我首先寻找想买进的人，然后才去找想卖出的人</h3><p>1</p>\n<h3 id=\"零售商喜欢提供数量折扣，就是因为大部分商人都喜欢大额购买的人。\"><a href=\"#零售商喜欢提供数量折扣，就是因为大部分商人都喜欢大额购买的人。\" class=\"headerlink\" title=\"零售商喜欢提供数量折扣，就是因为大部分商人都喜欢大额购买的人。\"></a>零售商喜欢提供数量折扣，就是因为大部分商人都喜欢大额购买的人。</h3><p><b>即使你的投资规模很小，你也可以多考虑考虑大生意。</b><br>举例：当我的公司想购买电脑时，我就打电话给几位朋友，问他们是否也要买电脑。。接着我们到不同的零售商那里进行谈判，尽量压低价格，因为我们购买电脑的数量很大。<br>小规模投资人善于小规模的动作，因为他们思考的范围太狭窄，他们总是单干，从不协同作战。</p>\n<h3 id=\"学习前人经验。\"><a href=\"#学习前人经验。\" class=\"headerlink\" title=\"学习前人经验。\"></a>学习前人经验。</h3><p>行动的人总会击败不行动的人。</p>\n<h1 id=\"结束语-怎样用7000美元支付孩子的大学费用\"><a href=\"#结束语-怎样用7000美元支付孩子的大学费用\" class=\"headerlink\" title=\"结束语　怎样用7000美元支付孩子的大学费用\"></a>结束语　怎样用7000美元支付孩子的大学费用</h1><p>金钱是一种观念，如果你想要更多的钱，需要改变你的思想。<br>金钱是一种观念，如果你想要更多的钱，只需改变你的思想。任何一个白手起家的人都是在某种思想的指导下，从小生意做起，然后不断做大。投资也是如此，起初只需投入一点钱，最后增长到很大数额。</p>\n<p>采取行动吧<br>上天赐予我们每个人两样伟大的礼物：思想和时间。你可以运用这两件礼物去做你愿意做的事情。</p>\n<p>没有其他人比你更适合来开启你的孩子的财商。</p>\n"},{"title":"6-1接口","date":"2024-04-23T01:36:12.000Z","_content":"\n- 允许接口中定义静态方法\n- 允许接口的方法定义默认实现，用default标记\n    1. 解决接口扩展问题\n    2. 定义接口方法时提供空实现，在实现多方法的接口时，只需实现自己关注的方法，可以不实现有默认实现的方法\n\n### 为什么不将 Comparable 直接设计成抽象类\n因java不支持多继承，而接口可以实现多个。\n\n\n\n### 解决默认方法冲突\n- 超类优先\n- 接口冲突，指定实现\n```\ninterface intf1{\n    default String getName(){\n        return \"PersonName\";\n    }\n}\n\ninterface intf2{\n   default String getName(){\n        return \"Named\";\n    }\n}\n\nclass c1 implements intf1,intf2{\n    @Override\n    public String getName() {\n        return intf1.super.getName();//指定intf1的默认实现\n    }\n}```\n\n","source":"_posts/JAVA/基础/6-1接口.md","raw":"---\ntitle: 6-1接口\ndate: 2024-04-23 09:36:12\ntags:\n---\n\n- 允许接口中定义静态方法\n- 允许接口的方法定义默认实现，用default标记\n    1. 解决接口扩展问题\n    2. 定义接口方法时提供空实现，在实现多方法的接口时，只需实现自己关注的方法，可以不实现有默认实现的方法\n\n### 为什么不将 Comparable 直接设计成抽象类\n因java不支持多继承，而接口可以实现多个。\n\n\n\n### 解决默认方法冲突\n- 超类优先\n- 接口冲突，指定实现\n```\ninterface intf1{\n    default String getName(){\n        return \"PersonName\";\n    }\n}\n\ninterface intf2{\n   default String getName(){\n        return \"Named\";\n    }\n}\n\nclass c1 implements intf1,intf2{\n    @Override\n    public String getName() {\n        return intf1.super.getName();//指定intf1的默认实现\n    }\n}```\n\n","slug":"JAVA/基础/6-1接口","published":1,"updated":"2024-04-26T01:16:46.325Z","_id":"clvd2z0v100016cv0bz2w0an4","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>允许接口中定义静态方法</li>\n<li>允许接口的方法定义默认实现，用default标记<ol>\n<li>解决接口扩展问题</li>\n<li>定义接口方法时提供空实现，在实现多方法的接口时，只需实现自己关注的方法，可以不实现有默认实现的方法</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"为什么不将-Comparable-直接设计成抽象类\"><a href=\"#为什么不将-Comparable-直接设计成抽象类\" class=\"headerlink\" title=\"为什么不将 Comparable 直接设计成抽象类\"></a>为什么不将 Comparable 直接设计成抽象类</h3><p>因java不支持多继承，而接口可以实现多个。</p>\n<h3 id=\"解决默认方法冲突\"><a href=\"#解决默认方法冲突\" class=\"headerlink\" title=\"解决默认方法冲突\"></a>解决默认方法冲突</h3><ul>\n<li>超类优先</li>\n<li>接口冲突，指定实现</li>\n</ul>\n<pre><code>interface intf1&#123;\n    default String getName()&#123;\n        return &quot;PersonName&quot;;\n    &#125;\n&#125;\n\ninterface intf2&#123;\n   default String getName()&#123;\n        return &quot;Named&quot;;\n    &#125;\n&#125;\n\nclass c1 implements intf1,intf2&#123;\n    @Override\n    public String getName() &#123;\n        return intf1.super.getName();//指定intf1的默认实现\n    &#125;\n&#125;```\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>允许接口中定义静态方法</li>\n<li>允许接口的方法定义默认实现，用default标记<ol>\n<li>解决接口扩展问题</li>\n<li>定义接口方法时提供空实现，在实现多方法的接口时，只需实现自己关注的方法，可以不实现有默认实现的方法</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"为什么不将-Comparable-直接设计成抽象类\"><a href=\"#为什么不将-Comparable-直接设计成抽象类\" class=\"headerlink\" title=\"为什么不将 Comparable 直接设计成抽象类\"></a>为什么不将 Comparable 直接设计成抽象类</h3><p>因java不支持多继承，而接口可以实现多个。</p>\n<h3 id=\"解决默认方法冲突\"><a href=\"#解决默认方法冲突\" class=\"headerlink\" title=\"解决默认方法冲突\"></a>解决默认方法冲突</h3><ul>\n<li>超类优先</li>\n<li>接口冲突，指定实现</li>\n</ul>\n<pre><code>interface intf1&#123;\n    default String getName()&#123;\n        return &quot;PersonName&quot;;\n    &#125;\n&#125;\n\ninterface intf2&#123;\n   default String getName()&#123;\n        return &quot;Named&quot;;\n    &#125;\n&#125;\n\nclass c1 implements intf1,intf2&#123;\n    @Override\n    public String getName() &#123;\n        return intf1.super.getName();//指定intf1的默认实现\n    &#125;\n&#125;```\n</code></pre>\n"},{"title":"6-3lambda表达式","date":"2024-04-23T07:59:45.000Z","_content":"\n### 函数式接口\n对于只有一个抽象方法的接口， 需要这种接口的对象时，就可以提供一个 lambda表达式。这种接口称为函数式接口 （ functional interface )。\n\n在 Java 中， 对 lambda 表达式所能做的也只是能转换为函数式接口。其他支持函数字面量的语言中，可以声明函数类型（如（String, String) -> int)、 声明这些类型的变量，使用变量保存函数表达式（如C#委托）。不过，Java 设计者决定保持接口概念， 没有为 Java增加函数类型。\n\n### 举例\nArrays.sort 第二个参数需要Comparator 实例对象， Comparator是只有一个方法的接口， 所以可以提供一个 lambda 表达式\n```\nArrays.sort (words,\n(first, second) -> first.lengthO - second.lengthO) ;\n```\n\n### JAVA提供的通用函数式接口\nJava API 在java.util.fimction 包中定义了很多非常通用的函数式接口\nBiFunction<T, U, R> 描述了参数类型为 T 和 U 而且返回类型为 R 的函数.可以把我们的字符串比较 lambda 表达式保存在这个类型的变量中：\n```\nBiFunction<String, String, Integer〉comp\n= (first, second) -> first.lengthO - second.length();\n```\njava.util.function 包中有一个尤其有用的接口 Predicate:\n```\npublic interface Predicate<T>\n{\nboolean test(T t);\n// Additional default and static methods\n}\n```\nArrayList 类有一个 removelf 方法， 它的参数就是一个 Predicate。下面的语句将从一个数组列表删除所有 null 值：\n```list.removelf(e -> e == null);```\n\n\n### 方法引用\n要用 :: 操作符分隔方法名与对象或类名。主要有 3 种情况：\n- object::instanceMethod\n- Class::staticMethod\n- Class.instanceMethod 第 1 个参数会成为方法的目标。\n    例如：String::compareToIgnoreCase 等同于 (x, y) -> x.compareToIgnoreCase(y)\n### 构造器引用\n```\nArrayList<String> names = . . .;\nStream<Person> stream = names.stream().map(Person::new);\nList<Person> people = stream.col1ect(Col1ectors.toList());\n\nObject[] people = stream.toArrayO；\nPerson[] people = stream.toArray(Person[]::new):\n```\n\n### 变量作用域\n\n```\n public static void repeatMsg(String text, int delay) {\n\n        ActionListener listener = event -> {\n            System.out.println(text);\n            Toolkit.getDefaultToolkit().beep();\n        };\n\n        new Timer(delay, listener).start();\n    }\n```\nlambda 表达式有3个部分：\n- 一个代码块\n- 参数\n- 自由变量的值， 这是指非参数而且不在代码中定义的变量 (上例的text变量)\n\n自由变量的限制：lambda 表达式可以捕获外围作用域中变量的值，但引用值不能改变的变量。\n限制原因：避免并发产生的数据一致性问题\n\n<b>lambda表达式中的this关键字</b>指创建这个 lambda 表达式的方法的 this参数。\n```\npublic class ApplicationO\n    {\n        public void init()\n        {\n            ActionListener listener * event ->\n            {\n                System.out.print n(this.toString());\n                ...\n            }\n            ...\n        }\n    }\n```\n表达式 this.toString()会调用 Application 对象的 toString方法， 而不是 ActionListener 实\n例的方法。\n\n### 处理lambda表达式\n常用函数式接口\n![](6-3-1.png)\n基本类型的函数式接口\n![](6-3-2.png)\n使用时注意<b>避免装箱拆箱</b>，如根据实际情况选择使用 IntConsumer 还是Consume<lnteger>\n\n用 @FunctionalInterface 注解来标记只有一个抽象方法的接口\n两个优点：\n- 无意中增加了另一个非抽象方法， 编译器会产生一个错误消息\n- javadoc 页里会指出你的接口是一个函数式接口    \n\n### 再谈Comparator\n```\nArrays.sort(arr, Comparator.comparing(Person::getName, Comparator.comparingInt(String::length).reversed()).thenComparing(Person::getlName, Comparator.nullsLast(Comparator.comparingInt(String::length).reversed())));\n```\n排序规则：\n根据Name长度倒序，长度大在前\n根据lName长度倒序，长度大在前，为空在最后。","source":"_posts/JAVA/基础/6-3lambda表达式.md","raw":"---\ntitle: 6-3lambda表达式\ndate: 2024-04-23 15:59:45\ntags:\n---\n\n### 函数式接口\n对于只有一个抽象方法的接口， 需要这种接口的对象时，就可以提供一个 lambda表达式。这种接口称为函数式接口 （ functional interface )。\n\n在 Java 中， 对 lambda 表达式所能做的也只是能转换为函数式接口。其他支持函数字面量的语言中，可以声明函数类型（如（String, String) -> int)、 声明这些类型的变量，使用变量保存函数表达式（如C#委托）。不过，Java 设计者决定保持接口概念， 没有为 Java增加函数类型。\n\n### 举例\nArrays.sort 第二个参数需要Comparator 实例对象， Comparator是只有一个方法的接口， 所以可以提供一个 lambda 表达式\n```\nArrays.sort (words,\n(first, second) -> first.lengthO - second.lengthO) ;\n```\n\n### JAVA提供的通用函数式接口\nJava API 在java.util.fimction 包中定义了很多非常通用的函数式接口\nBiFunction<T, U, R> 描述了参数类型为 T 和 U 而且返回类型为 R 的函数.可以把我们的字符串比较 lambda 表达式保存在这个类型的变量中：\n```\nBiFunction<String, String, Integer〉comp\n= (first, second) -> first.lengthO - second.length();\n```\njava.util.function 包中有一个尤其有用的接口 Predicate:\n```\npublic interface Predicate<T>\n{\nboolean test(T t);\n// Additional default and static methods\n}\n```\nArrayList 类有一个 removelf 方法， 它的参数就是一个 Predicate。下面的语句将从一个数组列表删除所有 null 值：\n```list.removelf(e -> e == null);```\n\n\n### 方法引用\n要用 :: 操作符分隔方法名与对象或类名。主要有 3 种情况：\n- object::instanceMethod\n- Class::staticMethod\n- Class.instanceMethod 第 1 个参数会成为方法的目标。\n    例如：String::compareToIgnoreCase 等同于 (x, y) -> x.compareToIgnoreCase(y)\n### 构造器引用\n```\nArrayList<String> names = . . .;\nStream<Person> stream = names.stream().map(Person::new);\nList<Person> people = stream.col1ect(Col1ectors.toList());\n\nObject[] people = stream.toArrayO；\nPerson[] people = stream.toArray(Person[]::new):\n```\n\n### 变量作用域\n\n```\n public static void repeatMsg(String text, int delay) {\n\n        ActionListener listener = event -> {\n            System.out.println(text);\n            Toolkit.getDefaultToolkit().beep();\n        };\n\n        new Timer(delay, listener).start();\n    }\n```\nlambda 表达式有3个部分：\n- 一个代码块\n- 参数\n- 自由变量的值， 这是指非参数而且不在代码中定义的变量 (上例的text变量)\n\n自由变量的限制：lambda 表达式可以捕获外围作用域中变量的值，但引用值不能改变的变量。\n限制原因：避免并发产生的数据一致性问题\n\n<b>lambda表达式中的this关键字</b>指创建这个 lambda 表达式的方法的 this参数。\n```\npublic class ApplicationO\n    {\n        public void init()\n        {\n            ActionListener listener * event ->\n            {\n                System.out.print n(this.toString());\n                ...\n            }\n            ...\n        }\n    }\n```\n表达式 this.toString()会调用 Application 对象的 toString方法， 而不是 ActionListener 实\n例的方法。\n\n### 处理lambda表达式\n常用函数式接口\n![](6-3-1.png)\n基本类型的函数式接口\n![](6-3-2.png)\n使用时注意<b>避免装箱拆箱</b>，如根据实际情况选择使用 IntConsumer 还是Consume<lnteger>\n\n用 @FunctionalInterface 注解来标记只有一个抽象方法的接口\n两个优点：\n- 无意中增加了另一个非抽象方法， 编译器会产生一个错误消息\n- javadoc 页里会指出你的接口是一个函数式接口    \n\n### 再谈Comparator\n```\nArrays.sort(arr, Comparator.comparing(Person::getName, Comparator.comparingInt(String::length).reversed()).thenComparing(Person::getlName, Comparator.nullsLast(Comparator.comparingInt(String::length).reversed())));\n```\n排序规则：\n根据Name长度倒序，长度大在前\n根据lName长度倒序，长度大在前，为空在最后。","slug":"JAVA/基础/6-3lambda表达式","published":1,"updated":"2024-04-26T07:46:30.692Z","_id":"clvd2z0v300026cv0hd7igj06","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><p>对于只有一个抽象方法的接口， 需要这种接口的对象时，就可以提供一个 lambda表达式。这种接口称为函数式接口 （ functional interface )。</p>\n<p>在 Java 中， 对 lambda 表达式所能做的也只是能转换为函数式接口。其他支持函数字面量的语言中，可以声明函数类型（如（String, String) -&gt; int)、 声明这些类型的变量，使用变量保存函数表达式（如C#委托）。不过，Java 设计者决定保持接口概念， 没有为 Java增加函数类型。</p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>Arrays.sort 第二个参数需要Comparator 实例对象， Comparator是只有一个方法的接口， 所以可以提供一个 lambda 表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.sort (words,</span><br><span class=\"line\">(first, second) -&gt; first.lengthO - second.lengthO) ;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JAVA提供的通用函数式接口\"><a href=\"#JAVA提供的通用函数式接口\" class=\"headerlink\" title=\"JAVA提供的通用函数式接口\"></a>JAVA提供的通用函数式接口</h3><p>Java API 在java.util.fimction 包中定义了很多非常通用的函数式接口<br>BiFunction&lt;T, U, R&gt; 描述了参数类型为 T 和 U 而且返回类型为 R 的函数.可以把我们的字符串比较 lambda 表达式保存在这个类型的变量中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BiFunction&lt;String, String, Integer〉comp</span><br><span class=\"line\">= (first, second) -&gt; first.lengthO - second.length();</span><br></pre></td></tr></table></figure>\n<p>java.util.function 包中有一个尤其有用的接口 Predicate:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Predicate&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">boolean test(T t);</span><br><span class=\"line\">// Additional default and static methods</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ArrayList 类有一个 removelf 方法， 它的参数就是一个 Predicate。下面的语句将从一个数组列表删除所有 null 值：<br><code>list.removelf(e -&gt; e == null);</code></p>\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><p>要用 :: 操作符分隔方法名与对象或类名。主要有 3 种情况：</p>\n<ul>\n<li>object::instanceMethod</li>\n<li>Class::staticMethod</li>\n<li>Class.instanceMethod 第 1 个参数会成为方法的目标。<br>  例如：String::compareToIgnoreCase 等同于 (x, y) -&gt; x.compareToIgnoreCase(y)</li>\n</ul>\n<h3 id=\"构造器引用\"><a href=\"#构造器引用\" class=\"headerlink\" title=\"构造器引用\"></a>构造器引用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; names = . . .;</span><br><span class=\"line\">Stream&lt;Person&gt; stream = names.stream().map(Person::new);</span><br><span class=\"line\">List&lt;Person&gt; people = stream.col1ect(Col1ectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">Object[] people = stream.toArrayO；</span><br><span class=\"line\">Person[] people = stream.toArray(Person[]::new):</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void repeatMsg(String text, int delay) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       ActionListener listener = event -&gt; &#123;</span><br><span class=\"line\">           System.out.println(text);</span><br><span class=\"line\">           Toolkit.getDefaultToolkit().beep();</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">       new Timer(delay, listener).start();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>lambda 表达式有3个部分：</p>\n<ul>\n<li>一个代码块</li>\n<li>参数</li>\n<li>自由变量的值， 这是指非参数而且不在代码中定义的变量 (上例的text变量)</li>\n</ul>\n<p>自由变量的限制：lambda 表达式可以捕获外围作用域中变量的值，但引用值不能改变的变量。<br>限制原因：避免并发产生的数据一致性问题</p>\n<p><b>lambda表达式中的this关键字</b>指创建这个 lambda 表达式的方法的 this参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ApplicationO</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public void init()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ActionListener listener * event -&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.out.print n(this.toString());</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>表达式 this.toString()会调用 Application 对象的 toString方法， 而不是 ActionListener 实<br>例的方法。</p>\n<h3 id=\"处理lambda表达式\"><a href=\"#处理lambda表达式\" class=\"headerlink\" title=\"处理lambda表达式\"></a>处理lambda表达式</h3><p>常用函数式接口<br><img src=\"/blogs/JAVA/%E5%9F%BA%E7%A1%80/6-3lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/6-3-1.png\"><br>基本类型的函数式接口<br><img src=\"/blogs/JAVA/%E5%9F%BA%E7%A1%80/6-3lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/6-3-2.png\"><br>使用时注意<b>避免装箱拆箱</b>，如根据实际情况选择使用 IntConsumer 还是Consume<lnteger></p>\n<p>用 @FunctionalInterface 注解来标记只有一个抽象方法的接口<br>两个优点：</p>\n<ul>\n<li>无意中增加了另一个非抽象方法， 编译器会产生一个错误消息</li>\n<li>javadoc 页里会指出你的接口是一个函数式接口</li>\n</ul>\n<h3 id=\"再谈Comparator\"><a href=\"#再谈Comparator\" class=\"headerlink\" title=\"再谈Comparator\"></a>再谈Comparator</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.sort(arr, Comparator.comparing(Person::getName, Comparator.comparingInt(String::length).reversed()).thenComparing(Person::getlName, Comparator.nullsLast(Comparator.comparingInt(String::length).reversed())));</span><br></pre></td></tr></table></figure>\n<p>排序规则：<br>根据Name长度倒序，长度大在前<br>根据lName长度倒序，长度大在前，为空在最后。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><p>对于只有一个抽象方法的接口， 需要这种接口的对象时，就可以提供一个 lambda表达式。这种接口称为函数式接口 （ functional interface )。</p>\n<p>在 Java 中， 对 lambda 表达式所能做的也只是能转换为函数式接口。其他支持函数字面量的语言中，可以声明函数类型（如（String, String) -&gt; int)、 声明这些类型的变量，使用变量保存函数表达式（如C#委托）。不过，Java 设计者决定保持接口概念， 没有为 Java增加函数类型。</p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>Arrays.sort 第二个参数需要Comparator 实例对象， Comparator是只有一个方法的接口， 所以可以提供一个 lambda 表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.sort (words,</span><br><span class=\"line\">(first, second) -&gt; first.lengthO - second.lengthO) ;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JAVA提供的通用函数式接口\"><a href=\"#JAVA提供的通用函数式接口\" class=\"headerlink\" title=\"JAVA提供的通用函数式接口\"></a>JAVA提供的通用函数式接口</h3><p>Java API 在java.util.fimction 包中定义了很多非常通用的函数式接口<br>BiFunction&lt;T, U, R&gt; 描述了参数类型为 T 和 U 而且返回类型为 R 的函数.可以把我们的字符串比较 lambda 表达式保存在这个类型的变量中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BiFunction&lt;String, String, Integer〉comp</span><br><span class=\"line\">= (first, second) -&gt; first.lengthO - second.length();</span><br></pre></td></tr></table></figure>\n<p>java.util.function 包中有一个尤其有用的接口 Predicate:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Predicate&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">boolean test(T t);</span><br><span class=\"line\">// Additional default and static methods</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ArrayList 类有一个 removelf 方法， 它的参数就是一个 Predicate。下面的语句将从一个数组列表删除所有 null 值：<br><code>list.removelf(e -&gt; e == null);</code></p>\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><p>要用 :: 操作符分隔方法名与对象或类名。主要有 3 种情况：</p>\n<ul>\n<li>object::instanceMethod</li>\n<li>Class::staticMethod</li>\n<li>Class.instanceMethod 第 1 个参数会成为方法的目标。<br>  例如：String::compareToIgnoreCase 等同于 (x, y) -&gt; x.compareToIgnoreCase(y)</li>\n</ul>\n<h3 id=\"构造器引用\"><a href=\"#构造器引用\" class=\"headerlink\" title=\"构造器引用\"></a>构造器引用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; names = . . .;</span><br><span class=\"line\">Stream&lt;Person&gt; stream = names.stream().map(Person::new);</span><br><span class=\"line\">List&lt;Person&gt; people = stream.col1ect(Col1ectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">Object[] people = stream.toArrayO；</span><br><span class=\"line\">Person[] people = stream.toArray(Person[]::new):</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void repeatMsg(String text, int delay) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       ActionListener listener = event -&gt; &#123;</span><br><span class=\"line\">           System.out.println(text);</span><br><span class=\"line\">           Toolkit.getDefaultToolkit().beep();</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">       new Timer(delay, listener).start();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>lambda 表达式有3个部分：</p>\n<ul>\n<li>一个代码块</li>\n<li>参数</li>\n<li>自由变量的值， 这是指非参数而且不在代码中定义的变量 (上例的text变量)</li>\n</ul>\n<p>自由变量的限制：lambda 表达式可以捕获外围作用域中变量的值，但引用值不能改变的变量。<br>限制原因：避免并发产生的数据一致性问题</p>\n<p><b>lambda表达式中的this关键字</b>指创建这个 lambda 表达式的方法的 this参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ApplicationO</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public void init()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ActionListener listener * event -&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.out.print n(this.toString());</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>表达式 this.toString()会调用 Application 对象的 toString方法， 而不是 ActionListener 实<br>例的方法。</p>\n<h3 id=\"处理lambda表达式\"><a href=\"#处理lambda表达式\" class=\"headerlink\" title=\"处理lambda表达式\"></a>处理lambda表达式</h3><p>常用函数式接口<br><img src=\"/blogs/JAVA/%E5%9F%BA%E7%A1%80/6-3lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/6-3-1.png\"><br>基本类型的函数式接口<br><img src=\"/blogs/JAVA/%E5%9F%BA%E7%A1%80/6-3lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/6-3-2.png\"><br>使用时注意<b>避免装箱拆箱</b>，如根据实际情况选择使用 IntConsumer 还是Consume<lnteger></p>\n<p>用 @FunctionalInterface 注解来标记只有一个抽象方法的接口<br>两个优点：</p>\n<ul>\n<li>无意中增加了另一个非抽象方法， 编译器会产生一个错误消息</li>\n<li>javadoc 页里会指出你的接口是一个函数式接口</li>\n</ul>\n<h3 id=\"再谈Comparator\"><a href=\"#再谈Comparator\" class=\"headerlink\" title=\"再谈Comparator\"></a>再谈Comparator</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.sort(arr, Comparator.comparing(Person::getName, Comparator.comparingInt(String::length).reversed()).thenComparing(Person::getlName, Comparator.nullsLast(Comparator.comparingInt(String::length).reversed())));</span><br></pre></td></tr></table></figure>\n<p>排序规则：<br>根据Name长度倒序，长度大在前<br>根据lName长度倒序，长度大在前，为空在最后。</p>\n"},{"title":"6-4内部类","date":"2024-04-26T07:58:59.000Z","_content":"\n# 内部类的特殊语法规则\n可直接访问外部类的域\n## 访问域\nOuterClass.this.name   (name是外部类的域名)\n\n## 构造一个对象\n```\nTalkingClock jabberer = new Ta1kingClock(1000, true);\nTalkingOock.TiiePrinter listener = jabberer.new TimePrinterO；\n```\n\n## 内部类是否有用、必要和安全\n\n## 局部内部类\n局部类不能用 public 或 private 访问说明符进行声明。它的作用域被限定在声明这个局部类的块中\n```\n    public void start\n    {\n        class TiiePrinter inpleients ActionListener\n        {\n            public void actionPerforaed(ActionEvent event)\n            {\n                Systei.out.println(\n                        \"At the tone, the tine is \" + new DateO)；\n                if (beep) Toolkit.getDefaul tToolki10•beep():\n            }\n        }\n        ActionListener listener = new TimePrinter();\n        Timer t = new Timer(interva1, listener);\n        t.start();\n    }\n```\n## 匿名内部类\n```\n    public void start(int interval, boolean beep)\n    {\n        ActionListener listener = new ActionListener\n        {\n            public void actionPerformed(ActionEvent event)\n            {\n                System.out.println(\"At the tone, the time is \" + new Date)；\n                if (beep) Toolkit.getDefaultToolkit().beep();\n            }\n        }；\n        Timer t = new Timer(interval, listener);\n        t.start0；\n    }\n```\n创建一个实现ActionListener接口的对象 需要实现的方法actionPerformed定义在大括号内\n\n## 静态内部类\n为了把一个类隐藏在另外一个类的内部，不需要内部类引用外围类对象。内部类声明为 static, 以便取消产生的引用。\n\n- 静态内部类的对象除了没有对生成它的外围类对象的引用特权外， 与其他内部类完全一样。\n- 静态内部类可以有静态域和方法。\n- 声明在接口中的内部类自动成为 static 和 public 类\n\n","source":"_posts/JAVA/基础/6-4内部类.md","raw":"---\ntitle: 6-4内部类\ndate: 2024-04-26 15:58:59\ntags: 内部类\n---\n\n# 内部类的特殊语法规则\n可直接访问外部类的域\n## 访问域\nOuterClass.this.name   (name是外部类的域名)\n\n## 构造一个对象\n```\nTalkingClock jabberer = new Ta1kingClock(1000, true);\nTalkingOock.TiiePrinter listener = jabberer.new TimePrinterO；\n```\n\n## 内部类是否有用、必要和安全\n\n## 局部内部类\n局部类不能用 public 或 private 访问说明符进行声明。它的作用域被限定在声明这个局部类的块中\n```\n    public void start\n    {\n        class TiiePrinter inpleients ActionListener\n        {\n            public void actionPerforaed(ActionEvent event)\n            {\n                Systei.out.println(\n                        \"At the tone, the tine is \" + new DateO)；\n                if (beep) Toolkit.getDefaul tToolki10•beep():\n            }\n        }\n        ActionListener listener = new TimePrinter();\n        Timer t = new Timer(interva1, listener);\n        t.start();\n    }\n```\n## 匿名内部类\n```\n    public void start(int interval, boolean beep)\n    {\n        ActionListener listener = new ActionListener\n        {\n            public void actionPerformed(ActionEvent event)\n            {\n                System.out.println(\"At the tone, the time is \" + new Date)；\n                if (beep) Toolkit.getDefaultToolkit().beep();\n            }\n        }；\n        Timer t = new Timer(interval, listener);\n        t.start0；\n    }\n```\n创建一个实现ActionListener接口的对象 需要实现的方法actionPerformed定义在大括号内\n\n## 静态内部类\n为了把一个类隐藏在另外一个类的内部，不需要内部类引用外围类对象。内部类声明为 static, 以便取消产生的引用。\n\n- 静态内部类的对象除了没有对生成它的外围类对象的引用特权外， 与其他内部类完全一样。\n- 静态内部类可以有静态域和方法。\n- 声明在接口中的内部类自动成为 static 和 public 类\n\n","slug":"JAVA/基础/6-4内部类","published":1,"updated":"2024-04-26T14:09:20.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvhez4n600006wv0d2rl2xuz","content":"<h1 id=\"内部类的特殊语法规则\"><a href=\"#内部类的特殊语法规则\" class=\"headerlink\" title=\"内部类的特殊语法规则\"></a>内部类的特殊语法规则</h1><p>可直接访问外部类的域</p>\n<h2 id=\"访问域\"><a href=\"#访问域\" class=\"headerlink\" title=\"访问域\"></a>访问域</h2><p>OuterClass.this.name   (name是外部类的域名)</p>\n<h2 id=\"构造一个对象\"><a href=\"#构造一个对象\" class=\"headerlink\" title=\"构造一个对象\"></a>构造一个对象</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TalkingClock jabberer = new Ta1kingClock(1000, true);</span><br><span class=\"line\">TalkingOock.TiiePrinter listener = jabberer.new TimePrinterO；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内部类是否有用、必要和安全\"><a href=\"#内部类是否有用、必要和安全\" class=\"headerlink\" title=\"内部类是否有用、必要和安全\"></a>内部类是否有用、必要和安全</h2><h2 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h2><p>局部类不能用 public 或 private 访问说明符进行声明。它的作用域被限定在声明这个局部类的块中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void start</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class TiiePrinter inpleients ActionListener</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public void actionPerforaed(ActionEvent event)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Systei.out.println(</span><br><span class=\"line\">                    &quot;At the tone, the tine is &quot; + new DateO)；</span><br><span class=\"line\">            if (beep) Toolkit.getDefaul tToolki10•beep():</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ActionListener listener = new TimePrinter();</span><br><span class=\"line\">    Timer t = new Timer(interva1, listener);</span><br><span class=\"line\">    t.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void start(int interval, boolean beep)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ActionListener listener = new ActionListener</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public void actionPerformed(ActionEvent event)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.println(&quot;At the tone, the time is &quot; + new Date)；</span><br><span class=\"line\">            if (beep) Toolkit.getDefaultToolkit().beep();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;；</span><br><span class=\"line\">    Timer t = new Timer(interval, listener);</span><br><span class=\"line\">    t.start0；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个实现ActionListener接口的对象 需要实现的方法actionPerformed定义在大括号内</p>\n<h2 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h2><p>为了把一个类隐藏在另外一个类的内部，不需要内部类引用外围类对象。内部类声明为 static, 以便取消产生的引用。</p>\n<ul>\n<li>静态内部类的对象除了没有对生成它的外围类对象的引用特权外， 与其他内部类完全一样。</li>\n<li>静态内部类可以有静态域和方法。</li>\n<li>声明在接口中的内部类自动成为 static 和 public 类</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"内部类的特殊语法规则\"><a href=\"#内部类的特殊语法规则\" class=\"headerlink\" title=\"内部类的特殊语法规则\"></a>内部类的特殊语法规则</h1><p>可直接访问外部类的域</p>\n<h2 id=\"访问域\"><a href=\"#访问域\" class=\"headerlink\" title=\"访问域\"></a>访问域</h2><p>OuterClass.this.name   (name是外部类的域名)</p>\n<h2 id=\"构造一个对象\"><a href=\"#构造一个对象\" class=\"headerlink\" title=\"构造一个对象\"></a>构造一个对象</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TalkingClock jabberer = new Ta1kingClock(1000, true);</span><br><span class=\"line\">TalkingOock.TiiePrinter listener = jabberer.new TimePrinterO；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内部类是否有用、必要和安全\"><a href=\"#内部类是否有用、必要和安全\" class=\"headerlink\" title=\"内部类是否有用、必要和安全\"></a>内部类是否有用、必要和安全</h2><h2 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h2><p>局部类不能用 public 或 private 访问说明符进行声明。它的作用域被限定在声明这个局部类的块中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void start</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class TiiePrinter inpleients ActionListener</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public void actionPerforaed(ActionEvent event)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Systei.out.println(</span><br><span class=\"line\">                    &quot;At the tone, the tine is &quot; + new DateO)；</span><br><span class=\"line\">            if (beep) Toolkit.getDefaul tToolki10•beep():</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ActionListener listener = new TimePrinter();</span><br><span class=\"line\">    Timer t = new Timer(interva1, listener);</span><br><span class=\"line\">    t.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void start(int interval, boolean beep)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ActionListener listener = new ActionListener</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public void actionPerformed(ActionEvent event)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.println(&quot;At the tone, the time is &quot; + new Date)；</span><br><span class=\"line\">            if (beep) Toolkit.getDefaultToolkit().beep();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;；</span><br><span class=\"line\">    Timer t = new Timer(interval, listener);</span><br><span class=\"line\">    t.start0；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个实现ActionListener接口的对象 需要实现的方法actionPerformed定义在大括号内</p>\n<h2 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h2><p>为了把一个类隐藏在另外一个类的内部，不需要内部类引用外围类对象。内部类声明为 static, 以便取消产生的引用。</p>\n<ul>\n<li>静态内部类的对象除了没有对生成它的外围类对象的引用特权外， 与其他内部类完全一样。</li>\n<li>静态内部类可以有静态域和方法。</li>\n<li>声明在接口中的内部类自动成为 static 和 public 类</li>\n</ul>\n"},{"title":"6-5代理","date":"2024-04-26T14:09:42.000Z","_content":"\n\n```\n// 定义调用处理器\nclass IntegerTraceHandler implements InvocationHandler {\n    private Integer target;\n\n    public IntegerTraceHandler(Integer target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"target:\" + target);\n        return method.invoke(target, args);\n    }\n}\n\npublic static void main(String[] args){\n        Integer i = 10;\n        InvocationHandler handler = new IntegerTraceHandler(i);\n        Object proxy = Proxy.newProxyInstance(null, new Class[]{Comparable.class}, handler);\n        proxy.equals(1); // proxy调用IntegerTraceHandler的invoke方法\n}\n\n```","source":"_posts/JAVA/基础/6-5代理.md","raw":"---\ntitle: 6-5代理\ndate: 2024-04-26 22:09:42\ntags: 代理\n---\n\n\n```\n// 定义调用处理器\nclass IntegerTraceHandler implements InvocationHandler {\n    private Integer target;\n\n    public IntegerTraceHandler(Integer target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"target:\" + target);\n        return method.invoke(target, args);\n    }\n}\n\npublic static void main(String[] args){\n        Integer i = 10;\n        InvocationHandler handler = new IntegerTraceHandler(i);\n        Object proxy = Proxy.newProxyInstance(null, new Class[]{Comparable.class}, handler);\n        proxy.equals(1); // proxy调用IntegerTraceHandler的invoke方法\n}\n\n```","slug":"JAVA/基础/6-5代理","published":1,"updated":"2024-04-26T15:56:40.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvhez4nk00016wv0dldl5psx","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义调用处理器</span><br><span class=\"line\">class IntegerTraceHandler implements InvocationHandler &#123;</span><br><span class=\"line\">    private Integer target;</span><br><span class=\"line\"></span><br><span class=\"line\">    public IntegerTraceHandler(Integer target) &#123;</span><br><span class=\"line\">        this.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">        System.out.println(&quot;target:&quot; + target);</span><br><span class=\"line\">        return method.invoke(target, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void main(String[] args)&#123;</span><br><span class=\"line\">        Integer i = 10;</span><br><span class=\"line\">        InvocationHandler handler = new IntegerTraceHandler(i);</span><br><span class=\"line\">        Object proxy = Proxy.newProxyInstance(null, new Class[]&#123;Comparable.class&#125;, handler);</span><br><span class=\"line\">        proxy.equals(1); // proxy调用IntegerTraceHandler的invoke方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义调用处理器</span><br><span class=\"line\">class IntegerTraceHandler implements InvocationHandler &#123;</span><br><span class=\"line\">    private Integer target;</span><br><span class=\"line\"></span><br><span class=\"line\">    public IntegerTraceHandler(Integer target) &#123;</span><br><span class=\"line\">        this.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">        System.out.println(&quot;target:&quot; + target);</span><br><span class=\"line\">        return method.invoke(target, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void main(String[] args)&#123;</span><br><span class=\"line\">        Integer i = 10;</span><br><span class=\"line\">        InvocationHandler handler = new IntegerTraceHandler(i);</span><br><span class=\"line\">        Object proxy = Proxy.newProxyInstance(null, new Class[]&#123;Comparable.class&#125;, handler);</span><br><span class=\"line\">        proxy.equals(1); // proxy调用IntegerTraceHandler的invoke方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/UML/UML符号.png","slug":"UML符号.png","post":"clv7i8ut50004lgv081d2gxez","modified":0,"renderable":0},{"_id":"source/_posts/JAVA/基础/1-1数据类型/112.png","slug":"112.png","post":"clv9oft8l00013cv0coxpai8b","modified":0,"renderable":0},{"_id":"source/_posts/JAVA/基础/6-3lambda表达式/6-3-1.png","slug":"6-3-1.png","post":"clvd2z0v300026cv0hd7igj06","modified":1,"renderable":0},{"_id":"source/_posts/JAVA/基础/6-3lambda表达式/6-3-2.png","slug":"6-3-2.png","post":"clvd2z0v300026cv0hd7igj06","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"clv9nuxx200012sv0asage1r1","tag_id":"clv9oxp6f00073cv016anhaty","_id":"clv9oxp6h00083cv0c6w2aoef"},{"post_id":"clv9oft8l00013cv0coxpai8b","tag_id":"clv9oyfr200093cv0e4l9fu2h","_id":"clv9oyfr2000a3cv06hxd8fx2"},{"post_id":"clvbp7mqh0001rsv093fc2u55","tag_id":"clvbp7mqm0003rsv04p5la621","_id":"clvbp7mqp0005rsv06n0mg97r"},{"post_id":"clvbp7mql0002rsv07hybgp4g","tag_id":"clvbp7mqp0004rsv0enggcpmj","_id":"clvbp7mqq0006rsv01h5l7t3j"},{"post_id":"clvhez4n600006wv0d2rl2xuz","tag_id":"clvhez4nm00026wv0g6h3hwkr","_id":"clvhez4ns00046wv0h0xd530y"},{"post_id":"clvhez4nk00016wv0dldl5psx","tag_id":"clvhez4nq00036wv004r7h2hq","_id":"clvhez4ns00056wv0faft1ucb"}],"Tag":[{"name":"设计模式","_id":"clv9oxp6f00073cv016anhaty"},{"name":"JAVA","_id":"clv9oyfr200093cv0e4l9fu2h"},{"name":"枚举","_id":"clvbp7mqm0003rsv04p5la621"},{"name":"反射","_id":"clvbp7mqp0004rsv0enggcpmj"},{"name":"内部类","_id":"clvhez4nm00026wv0g6h3hwkr"},{"name":"代理","_id":"clvhez4nq00036wv004r7h2hq"}]}}